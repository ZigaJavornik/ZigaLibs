<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.14">
  <POU Name="FB_AlarmManager_Tests" Id="{10bfaa3e-65e7-0c01-2813-1ee946632c0a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FB_AlarmManager_Tests EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR;
	_alarmManager	: FB_AlarmManager(TRUE, 0);
	_alarmsArray	: ARRAY[0..100] OF ST_AlarmInfo;
	n				: T_ArrayIndexer;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_alarmManager(refAlarms := _alarmsArray);

Test00_RegisterAlarms();
Test01_ActivateNewAlarm_ExpectUnacknowledgedActiveAlarm();
Test02_AcknowledgeActiveAlarm_ExpectActiveAcknowledged();
Test03_ActivateExistingAlarm_ExpectSameActiveAlarmCount();
Test04_DeactivateAlarm_ExpectNotActiveAcknowledged();
Test05_AcknowlidgeInactiveAlarm_ExpectAcknowledgedNotActive();
Test06_DisableManager_ExpectNoActiveAlarms();
Test07_AcknowledgeAllAlarms_ExpectActiveAlarmsUnchanged();
Test08_ActivateByName();
Test09_DeactivateByName();
Test10_AcknowledgeByName();
Test11_GetAlarmByName();
Test12_GetAlarmById();
Test13_ActivateById();
Test14_DeactivateById();
Test15_AcknowledgeById();
Test16_TimeInfos();
Test17_RaiseUnexisitngAlarm_ExpectNoNewAlarmsActive();]]></ST>
    </Implementation>
    <Method Name="Test00_RegisterAlarms" Id="{51a6cd53-1880-0584-2f70-df4bc0e86a21}">
      <Declaration><![CDATA[METHOD Test00_RegisterAlarms
VAR_INPUT
END_VAR

VAR
	addAlarmIndex	: T_ArrayIndexer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test00_RegisterAlarms');
_alarmManager.Actions().Acknowledge();
AssertEquals_UDINT(
	Actual := _alarmManager.MaximumAlarmsCount,
	Expected := 101,
	Message := 'Total number of allowed alarms to be registered is incorrect.');

FOR addAlarmIndex := 1 TO 100 BY 1 DO
	AssertTrue(
		Condition := _alarmManager.RegisterAlarm(
			Id := addAlarmIndex,
			Message := CONCAT('Alarm message', TO_STRING(addAlarmIndex)),
			Name := CONCAT('Alarm name', TO_STRING(addAlarmIndex)),
			Level := E_AlarmLevel.INFO),
		Message := 'Registering alarm failed.');
		
	AssertEquals_UDINT(
		Actual := _alarmManager.RegisteredAlarmsCount,
		Expected := DINT_TO_UDINT(addAlarmIndex),
		Message := 'Registered alarm count is incorrect.');
		
	AssertTrue(
		Condition := _alarmManager.GetAlarmById(nID := addAlarmIndex).IsAcknowledged,
		Message := 'Newly registered alarm should be acknowledged by default, when created.');
END_FOR


AssertFalse(
	Condition := _alarmManager.RegisterAlarm(
		Id := 22,
		Message := CONCAT('Alarm message', TO_STRING(addAlarmIndex - 1)),
		Name := CONCAT('Alarm name', TO_STRING(addAlarmIndex - 1)),
		Level := E_AlarmLevel.INFO),
	Message := 'Registering an alarm with an existing id should not be possible.');

AssertTrue(
	Condition := _alarmManager.RegisterAlarm(
		Id := addAlarmIndex + 1,
		Message := CONCAT('Alarm message', TO_STRING(addAlarmIndex)),
		Name := CONCAT('Alarm name', TO_STRING(addAlarmIndex)),
		Level := E_AlarmLevel.INFO),
	Message := 'Registering alarm failed.');
AssertEquals_UDINT(
	Actual := _alarmManager.RegisteredAlarmsCount,
	Expected := DINT_TO_UDINT(addAlarmIndex),
	Message := 'Registered alarm count is incorrect.');

AssertFalse(
	Condition := _alarmManager.RegisterAlarm(
		Id := 333,
		Message := CONCAT('Alarm message', TO_STRING(addAlarmIndex)),
		Name := CONCAT('Alarm name', TO_STRING(addAlarmIndex)),
		Level := E_AlarmLevel.INFO),
	Message := 'Registering an alarm when the entire buffer has been filled should not be possible.');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test01_ActivateNewAlarm_ExpectUnacknowledgedActiveAlarm" Id="{7f0e9f4c-5bc2-0878-1385-3574e587c2ae}">
      <Declaration><![CDATA[METHOD Test01_ActivateNewAlarm_ExpectUnacknowledgedActiveAlarm
VAR_INPUT
END_VAR

VAR
	currentAlarm	: ST_AlarmInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test01_ActivateNewAlarm_ExpectUnacknowledgedActiveAlarm');

_alarmManager.RaiseAlarmById(10);
currentAlarm := _alarmManager.GetAlarmById(10);

AssertEquals_BOOL(
	Actual := currentAlarm.IsActive,
	Expected := TRUE,
	Message := 'Alarm activation failed.');
	
AssertEquals_BOOL(
	Actual := currentAlarm.IsAcknowledged,
	Expected := FALSE,
	Message := 'Newly activated alarm should not be acknowledged.');	

	
AssertEquals_UINT(
	Actual := _alarmManager.ActiveAlarmsCount,
	Expected := 1,
	Message := 'Active alarm count is incorrect.');

AssertEquals_UINT(
	Actual := _alarmManager.UnacknowledgedAlarmsCount,
	Expected := 1,
	Message := 'Unacknowledged alarm count is incorrect.');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test02_AcknowledgeActiveAlarm_ExpectActiveAcknowledged" Id="{166cfe6f-deb4-0095-3098-ac602a6b90d2}">
      <Declaration><![CDATA[METHOD Test02_AcknowledgeActiveAlarm_ExpectActiveAcknowledged
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test02_AcknowledgeActiveAlarm_ExpectActiveAcknowledged');

_alarmManager.AcknowledgeAlarmById(10);

AssertEquals_BOOL(
	Actual := _alarmManager.GetAlarmById(10).IsActive,
	Expected := TRUE,
	Message := 'Alarm activation failed.');
	
AssertEquals_BOOL(
	Actual := _alarmManager.GetAlarmById(10).IsAcknowledged,
	Expected := TRUE,
	Message := 'Acknowlidging active alarm failed.');	

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test03_ActivateExistingAlarm_ExpectSameActiveAlarmCount" Id="{7965def8-d7ed-02d1-3b57-b23c8065de36}">
      <Declaration><![CDATA[METHOD Test03_ActivateExistingAlarm_ExpectSameActiveAlarmCount
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test03_ActivateExistingAlarm_ExpectSameActiveAlarmCount');

_alarmManager.RaiseAlarmById(10);
_alarmManager();

AssertEquals_BOOL(
	Actual := _alarmManager.GetAlarmById(10).IsActive,
	Expected := TRUE,
	Message := 'Alarm activation failed.');
	
AssertEquals_BOOL(
	Actual := _alarmManager.GetAlarmById(10).IsAcknowledged,
	Expected := TRUE,
	Message := 'Already acknowledged alarm should not be acknowledged when activating the alarm while it is already active.');	

	
AssertEquals_UINT(
	Actual := _alarmManager.ActiveAlarmsCount,
	Expected := 1,
	Message := 'Active alarm count is incorrect.');

AssertEquals_UINT(
	Actual := _alarmManager.UnacknowledgedAlarmsCount,
	Expected := 0,
	Message := 'Activating acknowledged and already active alarm should not cause the alarm to be unacknowledged..');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test04_DeactivateAlarm_ExpectNotActiveAcknowledged" Id="{96dcec83-f316-0d03-070c-713bf1d2bb41}">
      <Declaration><![CDATA[METHOD Test04_DeactivateAlarm_ExpectNotActiveAcknowledged
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test04_DeactivateAlarm_ExpectNotActiveAcknowledged');

_alarmManager.DeactivateAlarmById(10);
_alarmManager();

AssertFalse(
	Condition := _alarmManager.GetAlarmById(10).IsActive,
	Message := 'Alarm deactivation failed.');
	
AssertTrue(
	Condition := _alarmManager.GetAlarmById(10).IsAcknowledged,
	Message := 'Alarm deactivation should not acknowledge the alarm.');	
	
AssertEquals_UINT(
	Actual := _alarmManager.ActiveAlarmsCount,
	Expected := 0,
	Message := 'Active alarm count is incorrect.');

AssertEquals_UINT(
	Actual := _alarmManager.UnacknowledgedAlarmsCount,
	Expected := 0,
	Message := 'Unacknowledged alarm count is incorrect.');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test05_AcknowlidgeInactiveAlarm_ExpectAcknowledgedNotActive" Id="{beee53a0-3829-0e73-085d-3463db81918b}">
      <Declaration><![CDATA[METHOD Test05_AcknowlidgeInactiveAlarm_ExpectAcknowledgedNotActive
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test05_AcknowlidgeInactiveAlarm_ExpectAcknowledgedNotActive');

_alarmManager.AcknowledgeAlarmById(10);
_alarmManager();

AssertEquals_BOOL(
	Actual := _alarmManager.GetAlarmById(10).IsActive,
	Expected := FALSE,
	Message := 'Alarm deactivation failed.');
	
AssertEquals_BOOL(
	Actual := _alarmManager.GetAlarmById(10).IsAcknowledged,
	Expected := TRUE,
	Message := 'Acknowlidging alarm failed.');	

	
AssertEquals_UINT(
	Actual := _alarmManager.ActiveAlarmsCount,
	Expected := 0,
	Message := 'Active alarm count is incorrect.');

AssertEquals_UINT(
	Actual := _alarmManager.UnacknowledgedAlarmsCount,
	Expected := 0,
	Message := 'Unacknowledged alarm count is incorrect.');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test06_DisableManager_ExpectNoActiveAlarms" Id="{b03481cc-e0d8-0ce1-3ecb-3abcdb72167d}">
      <Declaration><![CDATA[METHOD Test06_DisableManager_ExpectNoActiveAlarms
VAR_INPUT
END_VAR
VAR
	n	: T_ArrayIndexer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test06_DisableManager_ExpectNoActiveAlarms');

FOR n := 1 TO 40 BY 1 DO
	_alarmManager.RaiseAlarmById(n);
END_FOR

AssertEquals_UINT(
	Expected := 40,
	Actual := _alarmManager.ActiveAlarmsCount,
	Message := 'There should only be 40 active alarms at this point.');
		
_alarmManager.Enable := FALSE;

AssertEquals_UINT(
	Expected := 0,
	Actual := _alarmManager.ActiveAlarmsCount,
	Message := 'Disabling the manager should result in all of the alarms being inactive.');

_alarmManager.Enable := TRUE;

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test07_AcknowledgeAllAlarms_ExpectActiveAlarmsUnchanged" Id="{1a04ca75-ed21-0b83-3992-f864a8578b80}">
      <Declaration><![CDATA[METHOD Test07_AcknowledgeAllAlarms_ExpectActiveAlarmsUnchanged
VAR_INPUT
END_VAR

VAR
	n				: T_ArrayIndexer;
	fbAlarmManager	: FB_AlarmManager(TRUE, 0);
	arrAlarms		: ARRAY[0..60] OF ST_AlarmInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test07_AcknowledgeAllAlarms_ExpectActiveAlarmsUnchanged');

fbAlarmManager(refAlarms := arrAlarms);
FOR n := 1 TO 40 BY 1 DO
	fbAlarmManager.RegisterAlarm(n, TO_STRING(n), '', E_AlarmLevel.INFO);
	fbAlarmManager.RaiseAlarmById(n);
END_FOR

AssertEquals_UINT(
	Expected := 40,
	Actual := fbAlarmManager.ActiveAlarmsCount,
	Message := 'There should only be 40 active alarms at this point.');
		
fbAlarmManager.AcknowledgeAllAlarms();

AssertEquals_UINT(
	Expected := 0,
	Actual := fbAlarmManager.UnacknowledgedAlarmsCount,
	Message := 'Acknowlidging all alarms should result in no unacknowledged alarms.');

AssertEquals_UINT(
	Expected := 40,
	Actual := fbAlarmManager.ActiveAlarmsCount,
	Message := 'There should still be 40 active alarms, acknowlidning alarms should not affect alarm state.');


TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test08_ActivateByName" Id="{cb90bc6c-a663-0c9c-1b33-727dc3854afd}">
      <Declaration><![CDATA[METHOD Test08_ActivateByName
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test08_ActivateByName');

// Reset all alarms this way
_alarmManager.Enable := FALSE;
_alarmManager.Enable := TRUE;

_alarmManager.RaiseAlarmByName('Alarm name10');

AssertTrue(
	Condition := _alarmManager.GetAlarmByName('Alarm name10').IsActive,
	Message := 'Activating alarm by name failed.');

AssertFalse(
	Condition := _alarmManager.GetAlarmByName('Alarm name10').IsAcknowledged,
	Message := 'Alarm shold be unacknowledged.');
	
_alarmManager.DeactivateAlarmByName('Alarm name10');
_alarmManager.AcknowledgeAlarmByName('Alarm name10');

_alarmManager.Actions()
	.Raise()
	.ByName('Alarm name10');

AssertTrue(
	Condition := _alarmManager.GetAlarmByName('Alarm name10').IsActive,
	Message := 'Fluent - Activating alarm by name failed.');

AssertFalse(
	Condition := _alarmManager.GetAlarmByName('Alarm name10').IsAcknowledged,
	Message := 'Fluent - Alarm shold be unacknowledged.');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test09_DeactivateByName" Id="{99c997c1-4ac4-020e-34d2-567e99eb8a63}">
      <Declaration><![CDATA[METHOD Test09_DeactivateByName
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test09_DeactivateByName');

_alarmManager.DeactivateAlarmByName('Alarm name10');
AssertFalse(
	Condition := _alarmManager.GetAlarmByName('Alarm name10').IsActive,
	Message := 'Deactivate alarm by name failed.');

AssertFalse(
	Condition := _alarmManager.GetAlarmByName('Alarm name10').IsAcknowledged,
	Message := 'Alarm shold be unacknowledged.');
	
_alarmManager.RaiseAlarmByName('Alarm name10');
	
_alarmManager.Actions()
	.Deactivate()
	.ByName('Alarm name10');

AssertFalse(
	Condition := _alarmManager.GetAlarmByName('Alarm name10').IsActive,
	Message := 'Fluent - deactivating alarm by name failed.');

AssertFalse(
	Condition := _alarmManager.GetAlarmByName('Alarm name10').IsAcknowledged,
	Message := 'Fluent - Alarm shold be unacknowledged.');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test10_AcknowledgeByName" Id="{153a742d-7155-0960-3ec2-022d030aac91}">
      <Declaration><![CDATA[METHOD Test10_AcknowledgeByName
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test10_AcknowledgeByName');

_alarmManager.AcknowledgeAlarmByName('Alarm name10');

AssertTrue(
	Condition := _alarmManager.GetAlarmByName('Alarm name10').IsAcknowledged,
	Message := 'Alarm shold be acknowledged.');

	
_alarmManager.Actions().Raise().ByName('Alarm name10');
_alarmManager.Actions().Deactivate().ByName('Alarm name10');
_alarmManager.Actions().Acknowledge().ByName('Alarm name10');
AssertTrue(
	Condition := _alarmManager.GetAlarmByName('Alarm name10').IsAcknowledged,
	Message := 'Fluent - Alarm shold be acknowledged.');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test11_GetAlarmByName" Id="{4d533791-6062-0bdf-2d13-a36fcb1dcdfe}">
      <Declaration><![CDATA[METHOD Test11_GetAlarmByName
VAR_INPUT
END_VAR

VAR_INST
	fbAlarmManager	: FB_AlarmManager(TRUE, 0);
	alarms			: ARRAY[0..10] OF ST_AlarmInfo;
	i				: T_ArrayIndexer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test11_GetAlarmByName');
fbAlarmManager(refAlarms := alarms);

FOR i := 1 TO 11 BY 1 DO
	fbAlarmManager.RegisterAlarm(i, TO_STRING(i), '',E_AlarmLevel.INFO);
	AssertEquals_STRING(
		Actual := fbAlarmManager.GetAlarmByName(sName := TO_STRING(i)).Name,
		Expected := TO_STRING(i),
		Message := CONCAT('Getting alarm by name failed for alarm', TO_STRING(i)));	
END_FOR

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test12_GetAlarmById" Id="{b2630015-c400-05d0-091b-055cd024cccf}">
      <Declaration><![CDATA[METHOD Test12_GetAlarmById
VAR_INPUT
END_VAR
VAR_INST
	fbAlarmManager	: FB_AlarmManager(TRUE, 0);
	alarms			: ARRAY[0..10] OF ST_AlarmInfo;
	i				: T_ArrayIndexer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test12_GetAlarmById');
fbAlarmManager(refAlarms := alarms);

FOR i := 1 TO 11 BY 1 DO
	fbAlarmManager.RegisterAlarm(i, TO_STRING(i), '', E_AlarmLevel.INFO);
	AssertEquals_DINT(
		Actual := fbAlarmManager.GetAlarmById(i).Id,
		Expected := i,
		Message := CONCAT('Getting alarm by id failed for alarm', TO_STRING(i)));	
END_FOR

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test13_ActivateById" Id="{8d5ea681-fb36-0ca1-2731-31b329eb662b}">
      <Declaration><![CDATA[METHOD Test13_ActivateById
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test13_ActivateById');

// Reset all alarms this way
_alarmManager.Enable := FALSE;
_alarmManager.Enable := TRUE;

_alarmManager.RaiseAlarmById(10);

AssertTrue(
	Condition := _alarmManager.GetAlarmById(10).IsActive,
	Message := 'Activating alarm by id failed.');

AssertFalse(
	Condition := _alarmManager.GetAlarmById(10).IsAcknowledged,
	Message := 'Alarm shold be unacknowledged.');
	
_alarmManager.DeactivateAlarmById(10);
_alarmManager.AcknowledgeAlarmById(10);

_alarmManager.Actions()
	.Raise()
	.ById(10);

AssertTrue(
	Condition := _alarmManager.GetAlarmById(10).IsActive,
	Message := 'Fluent - Activating alarm by name failed.');

AssertFalse(
	Condition := _alarmManager.GetAlarmById(10).IsAcknowledged,
	Message := 'Fluent - Alarm shold be unacknowledged.');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test14_DeactivateById" Id="{fc5934bc-8eb0-0ffa-36ea-9b401169248a}">
      <Declaration><![CDATA[METHOD Test14_DeactivateById
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test14_DeactivateById');

_alarmManager.DeactivateAlarmById(10);
AssertFalse(
	Condition := _alarmManager.GetAlarmById(10).IsActive,
	Message := 'Deactivate alarm by name failed.');

AssertFalse(
	Condition := _alarmManager.GetAlarmById(10).IsAcknowledged,
	Message := 'Alarm shold be unacknowledged.');
	
_alarmManager.RaiseAlarmById(13);
	
_alarmManager.Actions()
	.Deactivate()
	.ById(13);

AssertFalse(
	Condition := _alarmManager.GetAlarmById(10).IsActive,
	Message := 'Fluent - deactivating alarm by name failed.');

AssertFalse(
	Condition := _alarmManager.GetAlarmById(10).IsAcknowledged,
	Message := 'Fluent - Alarm shold be unacknowledged.');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test15_AcknowledgeById" Id="{c509bed5-546c-02a1-09cd-cec74a9aa394}">
      <Declaration><![CDATA[METHOD Test15_AcknowledgeById
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test15_AcknowledgeById');

_alarmManager.AcknowledgeAlarmById(10);

AssertTrue(
	Condition := _alarmManager.GetAlarmById(10).IsAcknowledged,
	Message := 'Alarm shold be acknowledged.');

	
_alarmManager.Actions().Raise().ById(10);
_alarmManager.Actions().Deactivate().ById(10);
_alarmManager.Actions().Acknowledge().ById(10);
AssertTrue(
	Condition := _alarmManager.GetAlarmById(10).IsAcknowledged,
	Message := 'Fluent - Alarm shold be acknowledged.');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test16_TimeInfos" Id="{655ee826-7aca-00ae-013d-246f4b134f0a}">
      <Declaration><![CDATA[METHOD Test16_TimeInfos
VAR_INPUT
END_VAR

VAR_INST
	fbAlarmManager			: FB_AlarmManager(TRUE, 0);
	alarms					: ARRAY[0..10] OF ST_AlarmInfo;
	i						: T_ArrayIndexer;
	stTimeStruct			: Tc2_Utilities.TIMESTRUCT;
	stTimeStructActivation	: Tc2_Utilities.TIMESTRUCT;	
	stTimeStructAcnowledge	: Tc2_Utilities.TIMESTRUCT;
	alarm			: ST_AlarmInfo;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test16_TimeInfos');
fbAlarmManager(refAlarms := alarms);
IF fbAlarmManager._dateTime.CurrentTime.IsValid THEN
	FOR i := 0 TO 10 BY 1 DO
		fbAlarmManager.RegisterAlarm(i+1,'','', E_AlarmLevel.INFO);
		AssertEquals(
			Expected := stTimeStruct,
			Actual := fbAlarmManager.GetAlarmById(i).TimeInfos.Acknowledged,
			Message := 'Newly registered alarm should have empty time informations!');
		AssertEquals(
			Expected := stTimeStruct,
			Actual := fbAlarmManager.GetAlarmById(i).TimeInfos.Activated,
			Message := 'Newly registered alarm should have empty time informations!');
		AssertEquals(
			Expected := stTimeStruct,
			Actual := fbAlarmManager.GetAlarmById(i).TimeInfos.Deactivated,
			Message := 'Newly registered alarm should have empty time informations!');
	END_FOR
	
	// Raise alarm
	fbAlarmManager.Actions().Raise().ById(2);
	stTimeStruct := fbAlarmManager._dateTime.CurrentTime.Value;
	stTimeStructActivation := stTimeStruct;
	alarm := fbAlarmManager.GetAlarmById(2);
	AssertEquals_WORD(
		Expected := stTimeStruct.wMilliseconds,
		Actual := alarm.TimeInfos.Activated.wMilliseconds,
		Message := 'Activation time info after raising alarm (millisecond) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wSecond,
		Actual := alarm.TimeInfos.Activated.wSecond,
		Message := 'Activation time info after raising alarm (second) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wMinute,
		Actual := alarm.TimeInfos.Activated.wMinute,
		Message := 'Activation time info after raising alarm (minute) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wHour,
		Actual := alarm.TimeInfos.Activated.wHour,
		Message := 'Activation time info after raising alarm (hour) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wDay,
		Actual := alarm.TimeInfos.Activated.wDay,
		Message := 'Activation time info after raising alarm (day) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wMonth,
		Actual := alarm.TimeInfos.Activated.wMonth,
		Message := 'Activation time info after raising alarm (month) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wYear,
		Actual := alarm.TimeInfos.Activated.wYear,
		Message := 'Activation time info after raising alarm (year) is incorrect.');	
	AssertEquals_WORD(
		Expected := stTimeStruct.wDayOfWeek,
		Actual := alarm.TimeInfos.Activated.wDayOfWeek,
		Message := 'Activation time info after raising alarm (day of week) is incorrect.');
		
	MEMSET(ADR(stTimeStruct),0,SIZEOF(Tc2_Utilities.TIMESTRUCT));	
	AssertEquals(
		Expected := stTimeStruct,
		Actual := fbAlarmManager.GetAlarmById(2).TimeInfos.Acknowledged,
		Message := 'When alarm is raised, the acknowledged time information should be empty.');
	AssertEquals(
		Expected := stTimeStruct,
		Actual := fbAlarmManager.GetAlarmById(2).TimeInfos.Deactivated,
		Message := 'When alarm is raised, the deactivation time information should be empty.');
	
	// Acknowledge alarm
	fbAlarmManager.Actions().Acknowledge().ById(2);
	stTimeStruct := fbAlarmManager._dateTime.CurrentTime.Value;
	stTimeStructAcnowledge := stTimeStruct;
	alarm := fbAlarmManager.GetAlarmById(2);
	
	AssertEquals_WORD(
		Expected := stTimeStruct.wMilliseconds,
		Actual := alarm.TimeInfos.Acknowledged.wMilliseconds,
		Message := 'Acknowledged time info after acknowlidging alarm (millisecond) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wSecond,
		Actual := alarm.TimeInfos.Acknowledged.wSecond,
		Message := 'Acknowledged time info after acknowlidging alarm (second) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wMinute,
		Actual := alarm.TimeInfos.Acknowledged.wMinute,
		Message := 'Acknowledged time info after acknowlidging alarm (minute) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wHour,
		Actual := alarm.TimeInfos.Acknowledged.wHour,
		Message := 'Acknowledged time info after acknowlidging alarm (hour) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wDay,
		Actual := alarm.TimeInfos.Acknowledged.wDay,
		Message := 'Acknowledged time info after acknowlidging alarm (day) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wMonth,
		Actual := alarm.TimeInfos.Acknowledged.wMonth,
		Message := 'Acknowledged time info after acknowlidging alarm (month) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wYear,
		Actual := alarm.TimeInfos.Acknowledged.wYear,
		Message := 'Acknowledged time info after acknowlidging alarm (year) is incorrect.');	
	AssertEquals_WORD(
		Expected := stTimeStruct.wDayOfWeek,
		Actual := alarm.TimeInfos.Acknowledged.wDayOfWeek,
		Message := 'Acknowledged time info after acknowlidging alarm (day of week) is incorrect.');
	
	MEMSET(ADR(stTimeStruct),0,SIZEOF(Tc2_Utilities.TIMESTRUCT));	
	AssertEquals(
		Expected := stTimeStruct,
		Actual := fbAlarmManager.GetAlarmById(2).TimeInfos.Deactivated,
		Message := 'When alarm is acknowledged, the deactivation time information should not change.');
	AssertEquals(
		Actual := fbAlarmManager.GetAlarmById(2).TimeInfos.Activated,
		Expected := stTimeStructActivation,
		Message := 'If alarm is acknowledged, the acivation time info should not change.');
		
	// Deactivate alarm
	fbAlarmManager.Actions().Deactivate().ById(2);
	stTimeStruct := fbAlarmManager._dateTime.CurrentTime.Value;
	alarm := fbAlarmManager.GetAlarmById(2);
	
	AssertEquals_WORD(
		Expected := stTimeStruct.wMilliseconds,
		Actual := alarm.TimeInfos.Deactivated.wMilliseconds,
		Message := 'Deactivation time info after deactivating alarm (millisecond) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wSecond,
		Actual := alarm.TimeInfos.Deactivated.wSecond,
		Message := 'Deactivation time info after deactivating alarm (second) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wMinute,
		Actual := alarm.TimeInfos.Deactivated.wMinute,
		Message := 'Deactivation time info after deactivating alarm (minute) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wHour,
		Actual := alarm.TimeInfos.Deactivated.wHour,
		Message := 'Deactivation time info after deactivating alarm (hour) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wDay,
		Actual := alarm.TimeInfos.Deactivated.wDay,
		Message := 'Deactivation time info after deactivating alarm (day) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wMonth,
		Actual := alarm.TimeInfos.Deactivated.wMonth,
		Message := 'Deactivation time info after deactivating alarm (month) is incorrect.');
	AssertEquals_WORD(
		Expected := stTimeStruct.wYear,
		Actual := alarm.TimeInfos.Deactivated.wYear,
		Message := 'Deactivation time info after deactivating alarm (year) is incorrect.');	
	AssertEquals_WORD(
		Expected := stTimeStruct.wDayOfWeek,
		Actual := alarm.TimeInfos.Deactivated.wDayOfWeek,
		Message := 'Deactivation time info after deactivating alarm (day of week) is incorrect.');
	
	// Check that previous entries did not change	
	AssertEquals(
		Expected := stTimeStructAcnowledge,
		Actual := fbAlarmManager.GetAlarmById(2).TimeInfos.Acknowledged,
		Message := 'When alarm is acknowledged, the deactivation time information should not change.');
	AssertEquals(
		Actual := fbAlarmManager.GetAlarmById(2).TimeInfos.Activated,
		Expected := stTimeStructActivation,
		Message := 'If alarm is acknowledged, the acivation time info should not change.');
	
		
	// Activate again and confirm that acknowledge and deactivation are reset
	// Raise alarm
	fbAlarmManager.Actions().Raise().ById(2);
	MEMSET(ADR(stTimeStruct),0,SIZEOF(Tc2_Utilities.TIMESTRUCT));
	AssertEquals(
		Actual := fbAlarmManager.GetAlarmById(2).TimeInfos.Deactivated,
		Expected := stTimeStruct,
		Message := 'When alarm is re-activated, previous time information for "deactivated" should be cleared.');
	AssertEquals(
		Actual := fbAlarmManager.GetAlarmById(2).TimeInfos.Acknowledged,
		Expected := stTimeStruct,
		Message := 'When alarm is re-activated, previous time information for "acknowledged" should be cleared.');
TcUnit.TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test17_RaiseUnexisitngAlarm_ExpectNoNewAlarmsActive" Id="{3b6b474e-0cb7-0914-0086-cb6760c65883}">
      <Declaration><![CDATA[METHOD Test17_RaiseUnexisitngAlarm_ExpectNoNewAlarmsActive
VAR_INPUT
END_VAR

VAR_INST
	prevAlarmActiveCount	: UINT;
	prevUnackAlarmCount		: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test17_RaiseUnexisitngAlarm_ExpectNoNewAlarmsActive');
prevAlarmActiveCount := _alarmManager.ActiveAlarmsCount;
prevUnackAlarmCount := _alarmManager.UnacknowledgedAlarmsCount;

_alarmManager.RaiseAlarmById(24523452);
AssertEquals_UINT(
	Actual := _alarmManager.ActiveAlarmsCount,
	Expected := prevAlarmActiveCount,
	Message := 'If an alarm that does not exist is raised, active alarms count should not change.');
	
AssertEquals_UINT(
	Actual := _alarmManager.UnacknowledgedAlarmsCount,
	Expected := prevUnackAlarmCount,
	Message := 'If an alarm that does not exist is raised, active alarms count should not change.');
	
_alarmManager.Actions().Raise().ById(24523452);
AssertEquals_UINT(
	Actual := _alarmManager.ActiveAlarmsCount,
	Expected := prevAlarmActiveCount,
	Message := 'Fluent - If an alarm that does not exist is raised, active alarms count should not change.');
	
AssertEquals_UINT(
	Actual := _alarmManager.UnacknowledgedAlarmsCount,
	Expected := prevUnackAlarmCount,
	Message := 'Fluent - If an alarm that does not exist is raised, active alarms count should not change.');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>