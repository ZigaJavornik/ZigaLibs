<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_AlarmManager" Id="{3eb86085-e2c4-0140-28bd-03ee6f0441da}" SpecialFunc="None">
    <Declaration><![CDATA[// Alarm manager function block. 
// Make sure to call the body of this block before doing any method calls so that the array to be managed is assigned via the var_in_out.
// If you, for example, register an alarm before assigning the array, the alarm will not be registered due to invalid reference of the array.
FUNCTION_BLOCK FB_AlarmManager IMPLEMENTS I_AlarmManager

VAR
	_enable						: BOOL;
	_alarmArrayProperties		: ST_ArrayProperties;
	_stringBuilder				: FB_StringBuilderBase;
	_dateTime					: FB_LocalSystemTimeProvider;
	_initialized				: BOOL := FALSE;
	
	_activeAlarmCount			: UINT;
	_unacknowledgedAlarmCount	: UINT;
	_logger						: REFERENCE TO I_LoggerEx;	// If provided, logging will be used.
	_emptyAlarm					: ST_AlarmInfo;
	_registeredAlarmsCount		: UDINT;
	_alarmActionBuilder			: FB_AlarmActionBuilder(THIS^);
END_VAR

VAR_IN_OUT
	// Array of alarms which the alarm manager will manage.
	refAlarms : ARRAY[*] OF ST_AlarmInfo;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_dateTime();
_alarmArrayProperties.StartIndex := LOWER_BOUND(refAlarms, 1);
_alarmArrayProperties.EndIndex := UPPER_BOUND(refAlarms, 1);
_alarmArrayProperties.Count := (_alarmArrayProperties.EndIndex - _alarmArrayProperties.StartIndex) + 1;]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{7b7d77f1-78e6-0d1a-03de-9ddcd9f7f204}" />
    <Folder Name="Methods - Private" Id="{0f021448-6076-0b9d-33ed-27037f4d7f26}" />
    <Folder Name="Methods - public" Id="{24288524-c072-076b-27be-112f43c39c40}">
      <Folder Name="Actions - ById" Id="{9562479f-6e10-0710-1c5b-0ecf089027c4}" />
      <Folder Name="Actions - ByName" Id="{f7c526fa-d186-0248-1e10-580b12f41ad1}" />
    </Folder>
    <Folder Name="Properties - public" Id="{8b06842f-475b-07cf-0bd3-846b427acb17}" />
    <Method Name="AcknowledgeAlarm" Id="{6d3c930a-f5e5-0d9e-02bd-a5b7038def9e}" FolderPath="Methods - Private\">
      <Declaration><![CDATA[METHOD INTERNAL AcknowledgeAlarm
VAR_INPUT
	alarm : REFERENCE TO ST_AlarmInfo;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF alarm.IsAcknowledged THEN
	RETURN;
END_IF

_unacknowledgedAlarmCount := _unacknowledgedAlarmCount - 1;
alarm.IsAcknowledged := TRUE;
alarm.TimeInfos.Acknowledged := _dateTime.CurrentTime.Value;

IF __ISVALIDREF(_logger) THEN 
	_logger.LogInfo(_stringBuilder.Reset()
		.AddString('Alarm ')
		.AddWithDblQuotationMarks(str := alarm.Name)
		.AddString(' with Id ')
		.AddWithDblQuotationMarks(str := TO_STRING(alarm.Id))
		.AddString(' acknowledged.')
		.Create());
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AcknowledgeAlarmById" Id="{34c24d4e-37de-0156-0871-b99f78e3aabb}" FolderPath="Methods - public\Actions - ById\">
      <Declaration><![CDATA[(* Acknowledges the alarm with the provided id*)
METHOD AcknowledgeAlarmById
VAR_INPUT
	nId	: T_ArrayIndexer;
END_VAR

VAR
	foundAlarm	: ST_AlarmInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(GetAlarmById(nID := nId)) THEN
	RETURN;
END_IF

foundAlarm := GetAlarmById(nID := nId);
IF foundAlarm.Id = nId THEN
	AcknowledgeAlarm(alarm := GetAlarmById(nID := nId));
	RETURN;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="AcknowledgeAlarmByName" Id="{751f3002-08c9-0085-00f5-b3e7c8810a6a}" FolderPath="Methods - public\Actions - ByName\">
      <Declaration><![CDATA[(* Acknowledges the alarm with the provided name.*)
METHOD AcknowledgeAlarmByName
VAR_INPUT
	sName	: Tc2_System.T_MaxString;
END_VAR

VAR
	foundAlarm	: ST_AlarmInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(GetAlarmByName(sName := sName)) THEN
	RETURN;
END_IF

foundAlarm := GetAlarmByName(sName := sName);
IF foundAlarm.Name = sName THEN
	AcknowledgeAlarm(alarm := GetAlarmByName(sName := sName));
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AcknowledgeAllAlarms" Id="{e599013d-0a20-0df0-2810-b0c409996be7}" FolderPath="Methods - public\">
      <Declaration><![CDATA[(* Acknowledges all uacknowledged alarms.*)
METHOD AcknowledgeAllAlarms
VAR
	alarmIndex	: T_ArrayIndexer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT THIS^.ValidateArrayRef() THEN
	RETURN;
END_IF

FOR alarmIndex := _alarmArrayProperties.StartIndex TO GetMaxAlarmArrayIndex() BY 1 DO
	AcknowledgeAlarm(alarm := refAlarms[alarmIndex]);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Actions" Id="{e2526889-ea63-0c5d-381c-a7f3918d7ca6}">
      <Declaration><![CDATA[// Provides access to action builder with fluent approach.
METHOD PUBLIC Actions : I_AlarmActions
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Actions := _alarmActionBuilder;]]></ST>
      </Implementation>
    </Method>
    <Property Name="ActiveAlarmsCount" Id="{bd8c5464-d35d-0844-3d69-36b4a7b6ae4e}" FolderPath="Properties - public\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
(* Gets the total count of currently active alarms*)
PROPERTY ActiveAlarmsCount : UINT
]]></Declaration>
      <Get Name="Get" Id="{faed4c10-5858-09e1-1763-b08d524c00d3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ActiveAlarmsCount := _activeAlarmCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="DeactivateAlarm" Id="{9de6b43f-5e23-0c41-2e43-fc878c004836}" FolderPath="Methods - Private\">
      <Declaration><![CDATA[METHOD INTERNAL DeactivateAlarm
VAR_INPUT
	alarm : REFERENCE TO ST_AlarmInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT alarm.IsActive THEN
	RETURN;
END_IF

alarm.IsActive := FALSE;
alarm.TimeInfos.Deactivated := _dateTime.CurrentTime.Value;
_activeAlarmCount := _activeAlarmCount - 1;

IF __ISVALIDREF(_logger) THEN
	_logger.LogInfo(_stringBuilder
		.Reset()
		.AddString('Alarm ')
		.AddWithDblQuotationMarks(str := alarm.Name)
		.AddString(' with Id ')
		.AddWithDblQuotationMarks(str := TO_STRING(alarm.Id))
		.AddString(' deactivated.')
		.Create());
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="DeactivateAlarmById" Id="{2088bf2f-f639-0d02-1c36-0ee719acfe55}" FolderPath="Methods - public\Actions - ById\">
      <Declaration><![CDATA[(* Deactivates the alarm with the provided Id (if it exists).*)
METHOD DeactivateAlarmById
VAR_INPUT
	(* Alarm id to be deactivated.*)
	nId	: T_ArrayIndexer;
END_VAR

VAR
	foundAlarm	 : ST_AlarmInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(GetAlarmById(nID := nId)) THEN
	RETURN;
END_IF

foundAlarm := GetAlarmById(nID := nId);

IF foundAlarm.Id = nId THEN
	DeactivateAlarm(alarm := GetAlarmById(nID := nId));
	RETURN;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="DeactivateAlarmByName" Id="{32977847-3bd9-0cb0-0693-f817b8be7827}" FolderPath="Methods - public\Actions - ByName\">
      <Declaration><![CDATA[(* Deactivates the alarm with the provided name (if it exists)*)
METHOD DeactivateAlarmByName
VAR_INPUT
	(* Alarm name to be deactivated.*)
	sName	: Tc2_System.T_MaxString;
END_VAR

VAR
	foundAlarm	 : ST_AlarmInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(GetAlarmByName(sName := sName)) THEN
	RETURN;
END_IF

foundAlarm := GetAlarmByName(sName := sName);
IF foundAlarm.Name = sName THEN
	DeactivateAlarm(alarm := GetAlarmByName(sName := sName));
	RETURN;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="DeactivateAllAlarms" Id="{233d8589-8a0f-0d42-2e91-9fb45312807e}" FolderPath="Methods - Private\">
      <Declaration><![CDATA[METHOD PRIVATE DeactivateAllAlarms

VAR
	alarmIndex	: T_ArrayIndexer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR alarmIndex := _alarmArrayProperties.StartIndex TO GetMaxAlarmArrayIndex() BY 1 DO
	IF refAlarms[alarmIndex].IsActive THEN
		DeactivateAlarm(refAlarms[alarmIndex]);
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="Enable" Id="{b311bbfa-d1b2-0227-1ecb-415a320bec44}" FolderPath="Properties - public\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
(* Gets or sets if alarm manager is enabled or not. When disabled, all active alarms will become inactive!*)
PROPERTY Enable : BOOL
]]></Declaration>
      <Get Name="Get" Id="{6f12b4f4-5648-09c2-1f52-47666d289721}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Enable := _enable;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{02dd0713-db4d-0de9-240f-084fdd3763cf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT Enable AND _enable THEN 
	IF __ISVALIDREF(_logger) THEN
		_logger.LogInfo('Alarms are now disabled.');
	END_IF
	DeactivateAllAlarms();
	AcknowledgeAllAlarms();
ELSIF Enable AND NOT _enable THEN
	IF __ISVALIDREF(_logger) THEN
		_logger.LogInfo('Alarms are now enabled.');
	END_IF
END_IF

_enable := Enable;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FB_init" Id="{cd4effa7-afd5-0849-1418-4fe8c107dbfc}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	bEnable	: BOOL;
	iLogger	: REFERENCE TO I_LoggerEx;	// If you do not want logging, simply set this variable to 0, internal checks will ommit any logging.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_enable := bEnable;
_logger REF= iLogger;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetAlarmById" Id="{403c4fb5-f026-053f-234a-bb9a4f8849b9}" FolderPath="Methods - public\Actions - ById\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
(* Gets the alarm with the provided id. 
 If no mathching alarm exists, an empty alarm is returned.*)
METHOD GetAlarmById : REFERENCE TO ST_AlarmInfo
VAR_INPUT
	(* Id of the alarm.*)
	nID	: T_ArrayIndexer;
END_VAR

VAR
	index	: T_ArrayIndexer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT THIS^.ValidateArrayRef() THEN
	GetAlarmById REF= _emptyAlarm;
END_IF

FOR index := _alarmArrayProperties.StartIndex TO GetMaxAlarmArrayIndex() BY 1 DO
	IF refAlarms[index].Id = nId THEN
		GetAlarmById REF= refAlarms[index];
		RETURN;
	END_IF
END_FOR

GetAlarmById REF= _emptyAlarm;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetAlarmByName" Id="{620bcf69-9c03-072e-14a0-c6da4c5cda69}" FolderPath="Methods - public\Actions - ByName\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
(* Gets the alarm with the provided name. 
 If no mathching alarm exists, an empty alarm is returned.*)
METHOD GetAlarmByName : REFERENCE TO ST_AlarmInfo
VAR_INPUT
	(* Name of the alarm*)
	sName	: Tc2_System.T_MaxString;
END_VAR

VAR
	index	 : T_ArrayIndexer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT THIS^.ValidateArrayRef() THEN
	GetAlarmByName REF= _emptyAlarm;
END_IF

FOR index := _alarmArrayProperties.StartIndex TO GetMaxAlarmArrayIndex() BY 1 DO
	IF refAlarms[index].Name = sName THEN
		GetAlarmByName REF= refAlarms[index];
		RETURN;
	END_IF
END_FOR

GetAlarmByName REF= _emptyAlarm;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMaxAlarmArrayIndex" Id="{914c7a8c-1f41-0372-139e-b6d103ec20aa}" FolderPath="Methods - Private\">
      <Declaration><![CDATA[METHOD PRIVATE GetMaxAlarmArrayIndex : T_ArrayIndexer
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetMaxAlarmArrayIndex := (_alarmArrayProperties.StartIndex + UDINT_TO_DINT(RegisteredAlarmsCount)) - 1;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MaximumAlarmsCount" Id="{4db2b792-75be-0f9f-3003-b41ea7626cae}" FolderPath="Properties - public\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
(* Gets the maximum ammount of alarms that can be registered by the alarm manager (depends on provided buffer size)*)
PROPERTY MaximumAlarmsCount : UDINT
]]></Declaration>
      <Get Name="Get" Id="{95e0b6bc-4c17-08e1-3c87-032efc273e9a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MaximumAlarmsCount := DINT_TO_UDINT(_alarmArrayProperties.Count);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="RaiseAlarm" Id="{fad3b3f8-3c33-0a4e-1db1-bc5e6dfd58ea}" FolderPath="Methods - Private\">
      <Declaration><![CDATA[METHOD INTERNAL RaiseAlarm
VAR_INPUT
	alarm : REFERENCE TO ST_AlarmInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF alarm.IsActive OR NOT _enable THEN
	RETURN;
END_IF

_activeAlarmCount := _activeAlarmCount + 1;
_unacknowledgedAlarmCount := _unacknowledgedAlarmCount + 1;
alarm.IsActive := TRUE;
alarm.IsAcknowledged := FALSE;
alarm.TimeInfos.Activated := _dateTime.CurrentTime.Value;
alarm.TimeInfos.Deactivated := TO_TIME(0);
alarm.TimeInfos.Acknowledged := TO_TIME(0);

IF __ISVALIDREF(_logger) THEN
	_logger.LogWarning(_stringBuilder
		.Reset()
		.AddString('Alarm ')
		.AddWithDblQuotationMarks(str := alarm.Name)
		.AddString(' with Id ')
		.AddWithDblQuotationMarks(str := TO_STRING(alarm.Id))
		.AddString(' actived! ')
		.AddString(alarm.Message)
		.Create());
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseAlarmById" Id="{f3279710-5767-0c00-1946-1d7103d1e628}" FolderPath="Methods - public\Actions - ById\">
      <Declaration><![CDATA[(* Activates the alarm with the provided Id (if it exists)*)
METHOD RaiseAlarmById
VAR_INPUT
	(* Alarm id to be activated*)
	nId	: T_ArrayIndexer;
END_VAR

VAR
	foundAlarm	 : ST_AlarmInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(GetAlarmById(nID := nId)) THEN
	RETURN;
END_IF

foundAlarm := GetAlarmById(nID := nId);
IF foundAlarm.Id = nId THEN
	RaiseAlarm(alarm := GetAlarmById(nID := nId));
	RETURN;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseAlarmByName" Id="{76cff595-4977-08b0-0a84-f685462f81f8}" FolderPath="Methods - public\Actions - ByName\">
      <Declaration><![CDATA[(* Activates the alarm with the provided name*)
METHOD RaiseAlarmByName
VAR_INPUT
	(* Alarm name to be actived*)
	sName	: Tc2_System.T_MaxString;
END_VAR

VAR
	foundAlarm	 : ST_AlarmInfo;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(GetAlarmByName(sName := sName)) THEN
	RETURN;
END_IF

foundAlarm := GetAlarmByName(sName := sName);
IF foundAlarm.Name = sName THEN
	RaiseAlarm(alarm := GetAlarmByName(sName := sName));
	RETURN;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterAlarm" Id="{cdcb8690-279d-00fd-371a-d270fd615fd4}" FolderPath="Methods - public\">
      <Declaration><![CDATA[(* Registers a new alarm with the provided information. 
 Returns TRUE if new alarm was registered or false if not (alarm buffer is full or the id already exists)*)
METHOD RegisterAlarm : BOOL
VAR_INPUT
	(* Alarm ID*)
	Id	: T_ArrayIndexer;
	(* Alarm name*)
	Name	: Tc2_System.T_MaxString;
	(* Message when the alarm occurrs*)
	Message	: Tc2_System.T_MaxString;
END_VAR

VAR
	foundAlarm		: ST_AlarmInfo;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _registeredAlarmsCount >= MaximumAlarmsCount THEN
	RETURN;
END_IF

foundAlarm := GetAlarmById(nID := Id);
IF foundAlarm.Id = Id THEN
	RETURN;
END_IF

refAlarms[_alarmArrayProperties.StartIndex + UDINT_TO_DINT(_registeredAlarmsCount)].Id := Id;
refAlarms[_alarmArrayProperties.StartIndex + UDINT_TO_DINT(_registeredAlarmsCount)].Name := Name;
refAlarms[_alarmArrayProperties.StartIndex + UDINT_TO_DINT(_registeredAlarmsCount)].Message := Message;
refAlarms[_alarmArrayProperties.StartIndex + UDINT_TO_DINT(_registeredAlarmsCount)].IsAcknowledged := TRUE;
_registeredAlarmsCount := _registeredAlarmsCount + 1;
RegisterAlarm := TRUE;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="RegisteredAlarmsCount" Id="{db450a50-100a-0f9f-0185-863d444ab242}" FolderPath="Properties - public\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
(* Gets the total number of alarms registered*)
PROPERTY RegisteredAlarmsCount : UDINT
]]></Declaration>
      <Get Name="Get" Id="{3ffe25f8-1466-05d3-12fc-372f958756d0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RegisteredAlarmsCount := _registeredAlarmsCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="UnacknowledgedAlarmsCount" Id="{8aca023b-5c4e-05de-0cc7-ab0f46075216}" FolderPath="Properties - public\">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
(* Gets the current count of alarms that have not yet been acknowledged*)
PROPERTY UnacknowledgedAlarmsCount : UINT
]]></Declaration>
      <Get Name="Get" Id="{0630d84b-323a-0c5c-15e4-0fc38e219d3f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[UnacknowledgedAlarmsCount := _unacknowledgedAlarmCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ValidateArrayRef" Id="{49b29f31-9740-00e4-2733-b13f91fa202b}" FolderPath="Methods - Private\">
      <Declaration><![CDATA[METHOD PRIVATE ValidateArrayRef : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ValidateArrayRef := refAlarms <> 0;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>