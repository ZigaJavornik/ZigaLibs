<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_PwmPidController" Id="{50ad7da5-1408-0178-2600-9d73c2320c62}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PwmPidController EXTENDS FB_PidController IMPLEMENTS I_PressureControlledDevice

VAR
	_pwmPidExtController		: Tc2_ControllerToolbox.FB_CTRL_PWM_OUT_EXT;
	_pwmPidExtParameters		: Tc2_ControllerToolbox.ST_CTRL_PWM_OUT_EXT_PARAMS;
	_mode						: E_ControlMode;
	_modeFromPreviousCycle		: E_ControlMode;
	_toggleOutputTrigger		: Tc2_Standard.R_TRIG;
	_pwmPidControllerParameters	: ST_PwmPidControllerParameters;
END_VAR

VAR_OUTPUT
	bPwmOut				: BOOL;	// Output, digital regulated value
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods - private" Id="{58fce052-3405-01b6-0248-56f6bcd5d9bf}" />
    <Folder Name="Methods - public" Id="{59afe288-345c-08af-0f38-e8ce9adb4be0}" />
    <Folder Name="Properties" Id="{f6dc1c29-ca96-07b4-256d-3ad35945d504}" />
    <Property Name="AutomaticControlActive" Id="{b71325a1-6180-0dba-09cc-af53ca52433e}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC AutomaticControlActive : BOOL]]></Declaration>
      <Get Name="Get" Id="{cae2238d-af04-0060-0752-80a9572a0ad8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AutomaticControlActive := _mode = E_ControlMode.AUTOMATIC AND _enable;

]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Deviation" Id="{8780ad00-8c27-0853-191f-c15d4574300b}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Deviation : BOOL]]></Declaration>
      <Get Name="Get" Id="{424b51d0-9ee1-0370-18ab-0b8d975659ea}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Deviation := SUPER^.Deviation AND _mode = E_ControlMode.AUTOMATIC;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Exectute" Id="{2f129321-85a0-0131-24a7-6ae4dd94f569}" FolderPath="Methods - public\">
      <Declaration><![CDATA[// Executes PID
METHOD Exectute
VAR_INPUT
	fSetpointValue	: LREAL;
	fProcessValue	: LREAL;
END_VAR

VAR
	bControllerOutput	: BOOL;
END_VAR

VAR_INST

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bControllerOutput := THIS^.bPwmOut;

// Execute base class (normal PID)
SUPER^.Exectute(fSetpointValue, fProcessValue);

// Since PWM PID's input can only be between 100 and -100, set the bounds!
SUPER^.stPidExtParameters.fOutMaxLimit := 100.0;
SUPER^.stPidExtParameters.fOutMinLimit := -100.0;

// When changing the mode, reset output. Also call the reset method, which will set the mode of PID back to idle
IF _mode <> _modeFromPreviousCycle THEN
	bControllerOutput := FALSE;
	THIS^.Reset();
END_IF

// Set the PID's structure. In case incorrect parameter is passed, use default setting
_pwmPidExtParameters.tPWMPeriod := MAX(DINT_TO_TIME(_pwmPidControllerParameters.Period), T#1S);

// State machine of the PWM PID
CASE _mode OF
	// Manual mode, pump controller
	E_ControlMode.MANUAL:
		IF _enable THEN
			_toggleOutputTrigger();
			IF _toggleOutputTrigger.Q THEN
				bControllerOutput := NOT bControllerOutput;	
			END_IF
			// Reset the trigger to allow for a new method call - do not call the trigger in case the method is called cyclically to prevent cyclic toggeling of the outptu
			_toggleOutputTrigger.CLK := FALSE;
		ELSE
			bControllerOutput := FALSE;	
			_toggleOutputTrigger.CLK := FALSE;
		END_IF
		
		
	// Automatic mode, pump controller
	E_ControlMode.AUTOMATIC:
		 // Controller state is set via the base SUPER^. class!
		CASE eControllerState OF
			E_ControllerState.STATE_IDLE:
				_pwmPidExtController(
					eMode 	:= Tc2_ControllerToolbox.eCTRL_MODE_PASSIVE,
				   stParams	:= _pwmPidExtParameters);	
				bControllerOutput := FALSE;

			E_ControllerState.STATE_ACTIVE:
				IF _pwmPidExtController.bError THEN
					eControllerState := E_ControllerState.STATE_ERROR;
				END_IF
				
				_pwmPidExtController(
					fPwmInput := fOutput,	// Already set to min/max +-100 at the begining
					eMode := Tc2_ControllerToolbox.eCTRL_MODE_ACTIVE,
					stParams := _pwmPidExtParameters);

				CASE _pwmPidControllerParameters.Direction OF
					E_PwmControlDirection.POSITIVE:
						bControllerOutput := _pwmPidExtController.bPwmOutBitPos;
					E_PwmControlDirection.NEGATIVE:
						bControllerOutput := _pwmPidExtController.bPwmOutBitNeg;
				END_CASE		

					
			E_ControllerState.STATE_ERROR:
				SUPER^._error := TRUE;
				THIS^._pwmPidExtController(eMode	:= Tc2_ControllerToolbox.eCTRL_MODE_PASSIVE,
							   stParams := _pwmPidExtParameters);
				bControllerOutput := FALSE;
				
			E_ControllerState.STATE_RESET:
				bControllerOutput := FALSE;
				_pwmPidExtController(
					eMode := Tc2_ControllerToolbox.eCTRL_MODE_RESET,
					stParams := _pwmPidExtParameters);
		
				
		END_CASE	
END_CASE

_modeFromPreviousCycle := _mode;

// Set the controlled output variable
THIS^.bPwmOut := bControllerOutput; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{7ba774df-1823-0260-3f39-cbcf92cdc748}" FolderPath="Methods - private\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_pwmPidExtParameters.tTaskCycleTime := T#10MS;
_pwmPidExtParameters.tMinWaitTime := T#5S;
_pwmPidExtParameters.tPWMPeriod := T#30S;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="Mode" Id="{3dc95c8f-0c9b-002d-3a74-d3ef6804d849}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Mode : E_ControlMode
]]></Declaration>
      <Get Name="Get" Id="{0046912a-b66e-00f6-05c3-e01f1e41bc65}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Mode := _mode;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{535b66c5-e7e6-0970-374b-033c4479caae}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _mode <> Mode THEN
	ResetOutput();
END_IF
_mode := Mode;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="PwmPidParameters" Id="{07d50885-44ff-0c9b-209b-5539d49d096b}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC PwmPidParameters : REFERENCE TO ST_PwmPidControllerParameters]]></Declaration>
      <Get Name="Get" Id="{53f8df8c-ebef-0fa2-0b69-197febc9afd8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PwmPidParameters REF= _pwmPidControllerParameters;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9ed1e720-e903-0955-3141-2fb13a7ccf18}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_pwmPidControllerParameters := PwmPidParameters;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ResetOutput" Id="{238ec71c-72f5-0eb4-17a4-ab7e26f0a771}" FolderPath="Methods - private\">
      <Declaration><![CDATA[METHOD PRIVATE ResetOutput
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.bPwmOut := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToggleOutput" Id="{040292cf-af21-0710-0e46-75bbadba9180}" FolderPath="Methods - public\">
      <Declaration><![CDATA[// Toggles the output. Only works if mode is set to E_ControlMode.MANUAL and the controller is enabled
METHOD ToggleOutput
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^._toggleOutputTrigger.CLK := TRUE;

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>