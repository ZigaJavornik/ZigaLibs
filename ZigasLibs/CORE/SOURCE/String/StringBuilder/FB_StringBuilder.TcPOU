<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.14">
  <POU Name="FB_StringBuilder" Id="{4af2ae7b-34e5-0402-2ab5-b787ed381493}" SpecialFunc="None">
    <Declaration><![CDATA[(* Provides basic string builder implementation.
IMPORTANT NOTE! Doing too many method chains might cause the codesys compiler to either be very slow
when doing the "generating code" part or even fail. Restrain to not using too many or too
many nested methods ( method(fb.Method(fb2.Method())... ).
*)
FUNCTION_BLOCK FB_StringBuilder IMPLEMENTS I_StringBuilder, I_StringBuilderEx_Any 
VAR
	_string	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddAny" Id="{c4c05828-1ba6-0402-3bbc-0582503d2048}">
      <Declaration><![CDATA[(* Adds the variable of any data type to the sequence. Conversion is done automatically from within. 
Returns I_StringBuilderEx_Any for further string building capability.

Some extra info: 
	- BOOL and BIT will have the string converted to 'TRUE' and 'FALSE' respectively.
	- BYTE, WORD, DWORD and LWORD will be converted without any additional options. Use AddAnyBit method for these instead!
	- REAL and LREAL will be added as T_MaxString values. Please use AddAnyReal method for these instead.*)

METHOD AddAny : REFERENCE TO FB_StringBuilder
VAR_INPUT
	anyVar	: ANY;
END_VAR

VAR
	result	: Tc2_System.T_MaxString;
	ptrWstring	: POINTER TO WSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE TO_INT(anyVar.TypeClass) OF 
	IBaseLibrary.TypeClass.TYPE_BOOL:
		IF Tc2_Utilities.PBOOL_TO_BOOL(anyVar.pValue) = TRUE THEN
			result :=	'TRUE';
		ELSE
			result := 'FALSE';
		END_IF
		
	IBaseLibrary.TypeClass.TYPE_BYTE: 
		result := BYTE_TO_STRING(Tc2_Utilities.PBYTE_TO_BYTE(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_DATE:
		result := DATE_TO_STRING(Tc2_Utilities.PDATE_TO_DATE(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_DATEANDTIME:
		result := DT_TO_STRING(Tc2_Utilities.PDT_TO_DT(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_DINT:
		result := DINT_TO_STRING(Tc2_Utilities.PDINT_TO_DINT(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_DWORD:
		result := DWORD_TO_STRING(Tc2_Utilities.PDWORD_TO_DWORD(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_ENUM:
		result := TO_STRING(anyVar.pValue^);
	
	IBaseLibrary.TypeClass.TYPE_INT:
		result := INT_TO_STRING(Tc2_Utilities.PINT_TO_INT(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_LINT:
		result := LINT_TO_STRING(Tc2_Utilities.PLINT_TO_LINT(anyVar.pValue));
		
	IBaseLibrary.TypeClass.TYPE_LREAL:
		result := LREAL_TO_STRING(Tc2_Utilities.PLREAL_TO_LREAL(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_LTIME:
		result := LTIME_TO_STRING(Tc2_Utilities.PLTIME_TO_LTIME(anyVar.pValue));
		
	IBaseLibrary.TypeClass.TYPE_LWORD:
		result := LWORD_TO_STRING(Tc2_Utilities.PLWORD_TO_LWORD(anyVar.pValue));
		
	IBaseLibrary.TypeClass.TYPE_REAL:
		result := REAL_TO_STRING(Tc2_Utilities.PREAL_TO_REAL(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_SINT:
		result := SINT_TO_STRING(Tc2_Utilities.PSINT_TO_SINT(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_STRING:
		result := TO_STRING(Tc2_Utilities.PSTRING_TO_STRING(anyVar.pValue));
		
	IBaseLibrary.TypeClass.TYPE_TIME:
		result := TIME_TO_STRING(Tc2_Utilities.PTIME_TO_TIME(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_TIMEOFDAY:
		result := TOD_TO_STRING(Tc2_Utilities.PTOD_TO_TOD(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_UDINT:
		result := UDINT_TO_STRING(Tc2_Utilities.PUDINT_TO_UDINT(anyVar.pValue));		
	
	IBaseLibrary.TypeClass.TYPE_UINT:
		result := UINT_TO_STRING(Tc2_Utilities.PUINT_TO_UINT(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_ULINT:
		result := ULINT_TO_STRING(Tc2_Utilities.PULINT_TO_ULINT(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_USINT:
		result := USINT_TO_STRING(Tc2_Utilities.PUSINT_TO_USINT(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_WORD:
		result := WORD_TO_STRING(Tc2_Utilities.PWORD_TO_WORD(anyVar.pValue));
	
	IBaseLibrary.TypeClass.TYPE_WSTRING:
		ptrWstring := anyVar.pValue;
		result := WSTRING_TO_STRING(ptrWstring^);
		
	ELSE
		result := TO_STRING(anyVar.pValue^);
	
END_CASE

THIS^.AddString(result);
AddAny REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddAnyBit" Id="{0bc46e66-9185-0294-12aa-5ad96ee0ed97}">
      <Declaration><![CDATA[// Adds a variable of type ANY_BIT to the string generating sequence, based on the provided parameters.
// This includes: BYTE, WORD, DWORD, LWORD, 
METHOD AddAnyBit  : REFERENCE TO FB_StringBuilder
VAR_INPUT
	anyBit					: ANY_BIT;				// Value to be converterd
	option					: E_AddAnyBitOptions;	// Select how the value is converter
	lowerCase				: BOOL;					// If hexadecimal option is selected, the result string can be converted to either lower or upper case
	displayedDigitsCount	: INT;					// This determines how many digits are to be displayed. If actual digits count is lower, the string is filled with zeros from the left side. If left at 0, the result string will be an empty string!
	addNotation				: BOOL;					// If this is set to TRUE, a notation will be prepended: (DEC)10, (BIN)10, (HEX)10, (OCT)10
END_VAR
VAR
	result : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE anyBit.TypeClass OF
	__SYSTEM.TYPE_CLASS.TYPE_WORD:
		CASE option OF
			E_AddAnyBitOptions.BINARY:
				result := Tc2_Utilities.WORD_TO_BINSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount);
				
			E_AddAnyBitOptions.DECIMAL:
				result := Tc2_Utilities.WORD_TO_DECSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount);
				
			E_AddAnyBitOptions.HEXADECIMAL:
				result := Tc2_Utilities.WORD_TO_HEXSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount,
					bLoCase := lowerCase);
				
			E_AddAnyBitOptions.OCTAL:
				result := Tc2_Utilities.WORD_TO_OCTSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount);
		END_CASE
		
	IBaseLibrary.TypeClass.TYPE_BYTE:
		CASE option OF
			E_AddAnyBitOptions.BINARY:
				result := Tc2_Utilities.BYTE_TO_BINSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount);
				
			E_AddAnyBitOptions.DECIMAL:
				result := Tc2_Utilities.BYTE_TO_DECSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount);
				
			E_AddAnyBitOptions.HEXADECIMAL:
				result := Tc2_Utilities.BYTE_TO_HEXSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount,
					bLoCase := lowerCase);
				
			E_AddAnyBitOptions.OCTAL:
				result := Tc2_Utilities.BYTE_TO_OCTSTR(
					in := anyBit.pValue^, 
					iPrecision := displayedDigitsCount);
		END_CASE
	
	__SYSTEM.TYPE_CLASS.TYPE_DWORD:
		CASE option OF
			E_AddAnyBitOptions.BINARY:
				result := Tc2_Utilities.WORD_TO_BINSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount);
				
			E_AddAnyBitOptions.DECIMAL:
				result := Tc2_Utilities.WORD_TO_DECSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount);
				
			E_AddAnyBitOptions.HEXADECIMAL:
				result := Tc2_Utilities.WORD_TO_HEXSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount,
					bLoCase := lowerCase);
				
			E_AddAnyBitOptions.OCTAL:
				result := Tc2_Utilities.WORD_TO_OCTSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount);
		END_CASE
	
	__SYSTEM.TYPE_CLASS.TYPE_LWORD:
		CASE option OF
			E_AddAnyBitOptions.BINARY:
				result := Tc2_Utilities.LWORD_TO_BINSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount);
				
			E_AddAnyBitOptions.DECIMAL:
				result := Tc2_Utilities.LWORD_TO_DECSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount);
				
			E_AddAnyBitOptions.HEXADECIMAL:
				result := Tc2_Utilities.LWORD_TO_HEXSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount,
					bLoCase := lowerCase);
				
			E_AddAnyBitOptions.OCTAL:
				result := Tc2_Utilities.LWORD_TO_OCTSTR(
					in := anyBit.pValue^,
					iPrecision := displayedDigitsCount);
		END_CASE
END_CASE

IF addNotation THEN
	CASE option OF
		E_AddAnyBitOptions.BINARY:
			result := Tc2_Standard.CONCAT('(BIN)', result);
			
		E_AddAnyBitOptions.DECIMAL:
			result := Tc2_Standard.CONCAT('(DEC)', result);
		
		E_AddAnyBitOptions.HEXADECIMAL:
			result := Tc2_Standard.CONCAT('(HEX)', result);
		
		E_AddAnyBitOptions.OCTAL:
			result := Tc2_Standard.CONCAT('(OCT)', result);
	END_CASE
END_IF

THIS^.AddString(result);
AddAnyBit REF= THIS^;


]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddAnyReal" Id="{088ed481-b63d-090e-2d20-76d4cef29e01}">
      <Declaration><![CDATA[// Adds any REAL or LREAL value to the generating string sequence.
// Please note that REAL values will ALWAYS be automatically rounded on 3rd decimal digit.
// Anything after it will be whatever TwinCAT decides to do.
METHOD AddAnyReal : REFERENCE TO FB_StringBuilder
VAR_INPUT
	anyReal		: ANY_REAL;	// Value to be converter
	precision	: INT;		// Precision of decimal digits
	round		: BOOL;		// Rounding of the last displayed digit
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF anyReal.diSize = SIZEOF(REAL) THEN
	// REAL
	THIS^.AddString(
		Tc2_Utilities.LREAL_TO_FMTSTR(
			in := REAL_TO_LREAL(Tc2_Utilities.PREAL_TO_REAL(anyReal.pValue)),
			iPrecision := precision, 
			bRound := round));
		
ELSE
	// LREAL
	THIS^.AddString(Tc2_Utilities.LREAL_TO_FMTSTR(
		in := Tc2_Utilities.PLREAL_TO_LREAL(anyReal.pValue),
		iPrecision := precision,
		bRound := round));	
END_IF

AddAnyReal REF= THIS^;


	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddString" Id="{a1f2665a-9e23-0057-3cb2-001019efbfb5}">
      <Declaration><![CDATA[(* Adds a string to the build sequence.*)
METHOD AddString : REFERENCE TO FB_StringBuilder
VAR_INPUT
	(* String to be added.*)
	str	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_string := Tc2_Standard.CONCAT(
	STR1 := _string, 
	STR2 := str);
	
AddString  REF= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddWithDblQuotationMarks" Id="{0e9fd4de-15c4-07a9-0872-3820188174d7}">
      <Declaration><![CDATA[(* Adds a string to the build sequence and wraps the str in double quotation marks "str"*)
METHOD AddWithDblQuotationMarks : REFERENCE TO FB_StringBuilder
VAR_INPUT
	str	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_string := Tc2_Standard.CONCAT(
	STR1 := _string, 
	STR2 := Tc2_Standard.CONCAT(
		STR1 := StringConstants.DoubleQuotationMark, 
		STR2 := Tc2_Standard.CONCAT(
			STR1 := str, 
			STR2 := StringConstants.DoubleQuotationMark))); 
	
AddWithDblQuotationMarks  REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddWithQuotationMark" Id="{71b839a6-f4de-0e1d-0723-bae3b89369d5}">
      <Declaration><![CDATA[(* Adds a string to the build sequence and wraps the str in quotation marks 'str'*)
METHOD AddWithQuotationMark : REFERENCE TO FB_StringBuilder
VAR_INPUT
	str	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_string := Tc2_Standard.CONCAT(
	STR1 := _string, 
	STR2 := Tc2_Standard.CONCAT(
		STR1 := StringConstants.SingleQuotationMark, 
		STR2 := Tc2_Standard.CONCAT(
			STR1 := str, 
			STR2 := StringConstants.SingleQuotationMark))); 
		
AddWithQuotationMark REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Create" Id="{837ad951-dde3-0ecc-1e91-80edffc6563f}">
      <Declaration><![CDATA[(* Finishes string generation and returns the generated string*)
METHOD Create : Tc2_System.T_MaxString
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Create := _string;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{c0b64bb0-ab5a-04e6-313f-3575f6a54110}">
      <Declaration><![CDATA[(* Reset the string build sequence, clear any string built so far.*)
METHOD Reset : REFERENCE TO FB_StringBuilder
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_string := '';
Reset REF= THIS^;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>