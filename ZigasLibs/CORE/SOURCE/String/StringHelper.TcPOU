<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.14">
  <POU Name="StringHelper" Id="{6038c506-8015-0cf2-2085-30a677155028}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM StringHelper
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="EndsWith" Id="{ae3c099d-30b2-0f82-0a20-ce3ad2e77fa0}">
      <Declaration><![CDATA[METHOD EndsWith : BOOL
VAR_INPUT
	str		: Tc2_System.T_MaxString;
	char	: T_Char;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[EndsWith := Tc2_Standard.RIGHT(str, 1) = char;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Join" Id="{99346997-fd62-0afc-1ca1-062e8359a9d5}">
      <Declaration><![CDATA[// Joins the provided string with the string to add.
// The refStr is altered in the process, this no additional assignments are required as oposed to CONCAT which returns the resulting string.
METHOD Join
VAR_INPUT
	refStr		: REFERENCE TO Tc2_System.T_MaxString;
	strToJoin	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[refStr := Tc2_Standard.CONCAT(refStr, strToJoin);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Split" Id="{b1d8d28d-cd99-072e-272d-5198c12d1482}">
      <Declaration><![CDATA[// Splits the STRING `str` based on the character `splitChar`.
// listOfSplitStrings eturns a collection of strings, or an empty list if no items were found
// If an empty string is provided, an empty stirng is the result
// If splitChar is an empty string, the string is split at every white space.
METHOD Split
VAR_INPUT
	str					: Tc2_System.T_MaxString;	// String that will be iterated
	splitChar			: T_Char;	// Character based on which the string is split up. These characters are removed
	listOfSplitStrings	: TcDynCollections.I_List;	// Resulting split strings.
END_VAR
VAR
	currentSplitString	: STRING;
	charPosition		: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF listOfSplitStrings = 0 THEN
	RETURN;
END_IF

listOfSplitStrings.Clear();
IF str = '' THEN
	RETURN;
END_IF

IF splitChar = '' THEN
	splitChar := ' ';
END_IF

WHILE Tc2_Standard.FIND(STR1 := str, STR2 := splitChar) <> 0 DO
	charPosition := Tc2_Standard.FIND(str, splitChar);
	currentSplitString := Tc2_Standard.LEFT(str, charPosition - 1);
	listOfSplitStrings.Append(currentSplitString);	
	str := Tc2_Standard.DELETE(str, charPosition, 1);
END_WHILE

listOfSplitStrings.Append(str);]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartsWith" Id="{5c75a7b6-3cc1-0540-0cd5-16739591bdb3}">
      <Declaration><![CDATA[// Checks if STRING `str` starts with the `char`
// Returs TRUE if first character in the provided string is `char` provided
METHOD StartsWith : BOOL
VAR_INPUT
	str		: Tc2_System.T_MaxString;	// String to be checked
	char	: T_Char;	// Character that the string will be checked, if it starts with it.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StartsWith := Tc2_System.F_ToCHR(str[0]) = char;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToLowerCase" Id="{04af86ff-c3c4-0ee5-29da-879b8d09b6b9}">
      <Declaration><![CDATA[// Converts the provided string to all lower case and returns the converted value.
METHOD ToLowerCase : T_MaxString
VAR_INPUT
	str	: Tc2_System.T_MaxString;	// Source string
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ToLowerCase := Tc2_Utilities.F_ToLCase(in := str);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToUpperCase" Id="{a9f90e08-f042-0b48-3d37-79d4dbe88971}">
      <Declaration><![CDATA[// Converts the provided string to all upper case and returns the converted value.
METHOD ToUpperCase : Tc2_System.T_MaxString
VAR_INPUT
	str	: Tc2_System.T_MaxString;	// Source string
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ToUpperCase := Tc2_Utilities.F_ToUCase(in := str);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrimLeftSide" Id="{aaf318c8-56f7-0f39-3b6b-023f532313ad}">
      <Declaration><![CDATA[// Removes leading spaces from the character string and returns the reduced character string
METHOD PUBLIC TrimLeftSide : Tc2_System.T_MaxString
VAR_INPUT
	str	: Tc2_System.T_MaxString; // String to be trimmed
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TrimLeftSide := Tc2_Utilities.F_LTrim(in := str);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrimRightSide" Id="{76095d0f-b051-05a8-3966-5a98e10f20ea}">
      <Declaration><![CDATA[// Truncates all trailing spaces from the specified value and returns the result.
METHOD PUBLIC TrimRightSide : Tc2_System.T_MaxString
VAR_INPUT
	str	: Tc2_System.T_MaxString;	// String to be trimmed
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TrimRightSide := Tc2_Utilities.F_RTrim(in := str);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>