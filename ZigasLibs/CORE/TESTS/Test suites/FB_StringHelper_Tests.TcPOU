<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_StringHelper_Tests" Id="{37e03e3a-145c-0efe-00fc-1f5db969facc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FB_StringHelper_Tests EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Test01_StartsWith();
Test02_Join();
Test03_EndsWith();
Test04_Split();
Test05_Contains();
Test06_ToLowerCase_UnlimitedSize();
Test07_ToUpperCase_UnlimitedSize();]]></ST>
    </Implementation>
    <Method Name="Test01_StartsWith" Id="{35ad7b9c-c7be-02d7-193e-ebf2529b27e6}">
      <Declaration><![CDATA[METHOD Test01_StartsWith
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test01_StartsWith');

AssertFalse(StringHelper.StartsWith('I start with an "I"...','B'), 
	'The provided string does not start with B. Method should return FALSE.');
	
AssertTrue(StringHelper.StartsWith('I start with an "I"...','I'), 
	'The provided string start with I. Method should return TRUE..');

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test02_Join" Id="{369c5294-09d6-0fc1-1d5c-b4531416cae1}">
      <Declaration><![CDATA[METHOD Test02_Join
VAR_INPUT
END_VAR

VAR
	sourceString	: Tc2_System.T_MaxString := 'My cats name is ';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test02_Join');

StringHelper.Join(sourceString, 'Jerry');
AssertEquals_STRING('My cats name is Jerry', sourceString,
	'Joining 2 strings failed.');

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test03_EndsWith" Id="{629b9ac3-8af8-06e6-3dc2-e90db0606944}">
      <Declaration><![CDATA[METHOD Test03_EndsWith
VAR_INPUT
END_VAR

VAR
	testString	: STRING := 'I end with an A';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test03_EndsWith');

AssertFalse(StringHelper.EndsWith(testString, 'B'),
	'Provided string does not end with "B"- returned value should be FALSE.');
AssertTrue(StringHelper.EndsWith(testString, 'A'),
	'Provided string ends with "A"- returned value should be TRUE.');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test04_Split" Id="{4e9545d5-6749-0aa7-332d-8a88b5d915e7}">
      <Declaration><![CDATA[METHOD Test04_Split
VAR_INPUT
END_VAR

VAR
	testStringWithDots			: STRING := 'This.Is.A.Test.String';
    testStringWithWhiteSpaces   : STRING := 'This Is A Test String';
    expectedStrings             : ARRAY[0..4] OF STRING := ['This','Is','A','Test','String'];
	foundStrings	            : ARRAY[0..4] OF STRING;
	listOfStrings				: TcDynCollections.FB_List;
	currentFoundString			: STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test04_Split');


// Split on "."
StringHelper.Split(testStringWithDots, '.', listOfStrings);
AssertEquals_DINT(5, listOfStrings._Count, 
	'Number of split strings is incorrect.');
	
listOfStrings.Get(0,foundStrings[0]);
listOfStrings.Get(1,foundStrings[1]);
listOfStrings.Get(2,foundStrings[2]);
listOfStrings.Get(3,foundStrings[3]);
listOfStrings.Get(4,foundStrings[4]);

AssertEquals_STRING(expectedStrings[0], foundStrings[0], 'Splitting on "." - 1st string differs.');
AssertEquals_STRING(expectedStrings[1], foundStrings[1], 'Splitting on "." - 2nd string differs.');
AssertEquals_STRING(expectedStrings[2], foundStrings[2], 'Splitting on "." - 3rd string differs.');
AssertEquals_STRING(expectedStrings[3], foundStrings[3], 'Splitting on "." - 4th string differs.');
AssertEquals_STRING(expectedStrings[4], foundStrings[4], 'Splitting on "." - 5th string differs.');

// Provide no split char - should be treated as white space
StringHelper.Split(testStringWithDots, '', listOfStrings);
AssertEquals_DINT(1, listOfStrings._Count, 
	'Empty split char should be treated as white space. Provided string with only dots should return a single string.');
	
listOfStrings.Get(0, foundStrings[0]);
AssertEquals_STRING(testStringWithDots, foundStrings[0], 
	'Empty split char should be treated as white space. Provided STRING with only dots should return the provided string.');
	
// String with whitespaces and empty split char.
StringHelper.Split(testStringWithWhiteSpaces,'', listOfStrings);
AssertEquals_DINT(5, listOfStrings._Count, 
	'Empty split char should be treated as white space. Provided string with white spaces should return a 5 strings.');

listOfStrings.Get(0,foundStrings[0]);
listOfStrings.Get(1,foundStrings[1]);
listOfStrings.Get(2,foundStrings[2]);
listOfStrings.Get(3,foundStrings[3]);
listOfStrings.Get(4,foundStrings[4]);

AssertEquals_STRING(expectedStrings[0], foundStrings[0], 'Splitting on white space - 1st string differs.');
AssertEquals_STRING(expectedStrings[1], foundStrings[1], 'Splitting on white space - 2nd string differs.');
AssertEquals_STRING(expectedStrings[2], foundStrings[2], 'Splitting on white space - 3rd string differs.');
AssertEquals_STRING(expectedStrings[3], foundStrings[3], 'Splitting on white space - 4th string differs.');
AssertEquals_STRING(expectedStrings[4], foundStrings[4], 'Splitting on white space - 5th string differs.');

// Provide empty string
StringHelper.Split('','A',listOfStrings);
AssertEquals_DINT(0, listOfStrings._Count, 'Providing empty string should result in an empty list');


listOfStrings.Clear();
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test05_Contains" Id="{a5f71156-9551-0539-0753-2d9b174decbd}">
      <Declaration><![CDATA[METHOD Test05_Contains
VAR_INPUT
END_VAR
VAR
	mainStringAsTmaxString		: Tc2_System.T_MaxString := 'asdfasdfadfasdfadfigsjcan you find mgndfkghdfghgdg!can you find me?';
	substringToFind_TmaxString	: STRING := 'can you find me';
	mainStringAsString300		: STRING(300) := 
		'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklm
		This is the test sentence.nopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789a
		bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';
	substringToFind_String300	: STRING := 'This is the test sentence';	
	mainStringTmp				: STRING(300);
	position 					: DINT;
	test	: int;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test05_Contains');

// T_MaxString tests

// doesen't contain
AssertFalse(StringHelper.FindStringWithin(mainStringAsTmaxString, 'test123', position => position),
	'String does not contain the provided substring.');
AssertEquals_DINT(0, position,
	'When string is not found, position should be 0');

// Upper case - fail
AssertFalse(StringHelper.FindStringWithin(mainStringAsTmaxString, StringHelper.ToUpperCase(substringToFind_TmaxString), position => position),
	'String should not be found, provided string is in upper case.');
AssertEquals_DINT(0, position,
	'When string is not found (upper case) , position should be 0');

// Lower case - fail
AssertFalse(StringHelper.FindStringWithin(mainStringAsTmaxString, StringHelper.ToLowerCase(substringToFind_TmaxString), position => position),
	'String should not be found, provided string is in lower case.');
AssertEquals_DINT(0, position,
	'When string is not found (lower case), position should be 0');

// Contains	
AssertTrue(StringHelper.FindStringWithin(mainStringAsTmaxString, substringToFind_TmaxString, position => position),
	'String contains the provided substring, expected returned value should be TRUE.');
AssertEquals_DINT(52, position,
	'Incorrect position of the found substring.');
	

// Strings larger than T_MaxString tests
// Does not contain
AssertFalse(StringHelper.FindStringWithin(mainStringAsString300, 'test1234', position => position),
	'String300 - provided substring does not exist in the main string, expected FALSE.');
AssertEquals_DINT(0, position,
	'String300 - when substring is not found, expected position is 0.');
	
// Upper case - fail	
mainStringTmp := mainStringAsString300;
StringHelper.ToUpperCase_UnlimitedSize(mainStringTmp);
AssertFalse(StringHelper.FindStringWithin(mainStringAsTmaxString, mainStringTmp, position => position),
	'String300 upper case - String should not be found, provided string is in upper case.');
AssertEquals_DINT(0, position,
	'String300 upper case - When string is not found (upper case) , position should be 0');
	
// Lower case - fail
mainStringTmp := mainStringAsString300;
StringHelper.ToLowerCase_UnlimitedSize(mainStringTmp);
AssertFalse(StringHelper.FindStringWithin(mainStringAsTmaxString, mainStringTmp, position => position),
	'String300 lower case - String should not be found, provided string is in lower case.');
AssertEquals_DINT(0, position,
	'String300 lower case - When string is not found (lower case), position should be 0');
test := Tc2_Standard.FIND(mainStringAsString300, substringToFind_String300);
// Contains	
AssertTrue(StringHelper.FindStringWithin(mainStringAsString300, substringToFind_String300, position => position),
	'String contains the provided substring, expected returned value should be TRUE.');
AssertEquals_DINT(76, position,
	'Incorrect position of the found substring.');	
	
TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test06_ToLowerCase_UnlimitedSize" Id="{a1679d44-1a82-02b9-36a5-a30562cdf41b}">
      <Declaration><![CDATA[METHOD Test06_ToLowerCase_UnlimitedSize
VAR_INPUT
END_VAR
VAR_INST
	expectedResult	: STRING(300) := 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmthis is the test sentence.nopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz';
	providedString	: STRING(300) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMTHIS IS THE TEST SENTENCE.NOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test06_ToLowerCase_UnlimitedSize');

StringHelper.ToLowerCase_UnlimitedSize(providedString);
AssertEquals(expectedResult, providedString,
	'Incorrect conversion to lower case of string(300)');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test07_ToUpperCase_UnlimitedSize" Id="{7d6e1af7-431b-090e-18c9-795ec6bb9246}">
      <Declaration><![CDATA[METHOD Test07_ToUpperCase_UnlimitedSize
VAR_INPUT
END_VAR
VAR_INST
	providedString	: STRING(300) := 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmThis is the test sentence.nopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';
	expectedResult	: STRING(300) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMTHIS IS THE TEST SENTENCE.NOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test07_ToUpperCase_UnlimitedSize');

StringHelper.ToUpperCase_UnlimitedSize(providedString);
AssertEquals(expectedResult, providedString,
	'Incorrect conversion to upper case of string(300)');
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>