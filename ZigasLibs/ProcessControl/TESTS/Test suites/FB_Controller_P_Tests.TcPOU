<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_Controller_P_Tests" Id="{82da4b0b-8dc4-0e0a-0fc4-43f4b3188fbc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Controller_P_Tests EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Test01_WhenDisabledExecuteAlwaysReturnsZero();
Test02_CycleTime100ms_ExpectNoOutputChangeUntilTimeElapsed();
Test03_ControllerOutputChangesWithEveryCycleTimeElapsed();
Test04_StepResponse_ChangeKp_ExpectDifferentResults();]]></ST>
    </Implementation>
    <Method Name="Test01_WhenDisabledExecuteAlwaysReturnsZero" Id="{679496ae-fac4-0519-1d96-fc392491796f}">
      <Declaration><![CDATA[METHOD Test01_WhenDisabledExecuteAlwaysReturnsZero
VAR_INPUT
END_VAR

VAR_INST
	fbController_P	: FB_Controller_P;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test01_WhenDisabledExecuteAlwaysReturnsZero'); 

fbController_P.CycleTime := T#0S;
fbController_P.Enable := FALSE;
fbController_P.Kp := 100;
fbController_P.Value.Setpoint := 100;


AssertEquals_REAL(
	Actual := fbController_P.Execute(),
	Expected := 0,
	Delta := 0,
	Message := 'When P controller is disabled, returned value should always be 0.');

fbController_P.Value.Setpoint := 500;

AssertEquals_REAL(
	Actual := fbController_P.Execute(),
	Expected := 0,
	Delta := 0,
	Message := 'When P controller is disabled, returned value should always be 0.');

fbController_P.Enable := TRUE;
fbController_P.Execute();
fbController_P.Enable := FALSE;
AssertEquals_REAL(
	Actual := fbController_P.Execute(),
	Expected := 0,
	Delta := 0,
	Message := 'Disabling P controller after being enabled should return 0, instantly.');


TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test02_CycleTime100ms_ExpectNoOutputChangeUntilTimeElapsed" Id="{5399c8b3-dfa4-0477-0566-80dbd0915935}">
      <Declaration><![CDATA[METHOD Test02_CycleTime100ms_ExpectNoOutputChangeUntilTimeElapsed
VAR_INPUT
END_VAR
VAR_INST
	fbController_P	: FB_Controller_P;
	TonOutputDelay	: Tc2_Standard.TON := ( PT := T#100MS);
	values			: ARRAY[0..1000] OF REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test02_CycleTime100ms_ExpectNoOutputChangeUntilTimeElapsed');

fbController_P.CycleTime := T#100MS;
fbController_P.Enable := TRUE;
fbController_P.Kp := 100;
fbController_P.Value.Setpoint := 100.0;
fbController_P.Value.Actual := 0;
TonOutputDelay(IN := TRUE);
fbController_P.Execute();

IF TonOutputDelay.Q THEN
	AssertEquals_REAL(
		Actual := fbController_P.ControllerOutput,
		Expected := fbController_P.Kp * (fbController_P.Value.Setpoint - fbController_P.Value.Actual),
		Delta := 0.001,
		Message := 'Incorrect output after elapsed time');
	TcUnit.TEST_FINISHED();
	RETURN;
END_IF

AssertEquals_REAL(
	Actual := fbController_P.ControllerOutput,
	Expected := 0,
	Delta := 0,
	Message := 'Before cycle time elapses, output should not change.');

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test03_ControllerOutputChangesWithEveryCycleTimeElapsed" Id="{0921ddec-0697-0de0-1957-6d348507c918}">
      <Declaration><![CDATA[METHOD Test03_ControllerOutputChangesWithEveryCycleTimeElapsed
VAR_INST
	fbController_P	: FB_Controller_P;
	TonOutputDelay	: Tc2_Standard.TON;
	nIteration	: UINT;
	fResult	: REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test03_ControllerOutputChangesWithEveryCycleTimeElapsed');

fbController_P.CycleTime := T#100MS;
fbController_P.Enable := TRUE;
fbController_P.Kp := 100;
fbController_P.Value.Setpoint := 100;
TonOutputDelay(IN := TRUE, pt := fbController_P.CycleTime);


IF TonOutputDelay.Q THEN
	TonOutputDelay(IN := FALSE);
	TonOutputDelay(IN := TRUE);
	nIteration := nIteration + 1;
	fbController_P.Value.Actual := nIteration * 100;
	fResult := fbController_P.Execute();
	
	AssertEquals_REAL(
		Actual := fbController_P.Execute(),
		Expected := fbController_P.Kp * (fbController_P.Value.Setpoint - fbController_P.Value.Actual),
		Delta := 0.001,
		Message := CONCAT('Incorrect output after elapsed time. Current iteration is ', TO_STRING(nIteration)));
		
	IF nIteration = 4 THEN
		TcUnit.TEST_FINISHED();
		RETURN;
	END_IF
END_IF

AssertEquals_REAL(
	Actual := fbController_P.Execute(),
	Expected := fResult,
	Delta := 0.001,
	Message := CONCAT('Before cycle time elapses, output should not change. Curernt iteration is ', TO_STRING(nIteration)));

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test04_StepResponse_ChangeKp_ExpectDifferentResults" Id="{9b086f0e-6fe9-0afd-37ad-cff3353f76a6}">
      <Declaration><![CDATA[METHOD Test04_StepResponse_ChangeKp_ExpectDifferentResults
VAR_INST
	fbController_P	: FB_Controller_P;
	TonOutputDelay	: Tc2_Standard.TON := ( PT := T#100MS);
	nIteration		: UINT;
	fResult			: REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test04_StepResponse_ChangeKp_ExpectDifferentResults');

fbController_P.CycleTime := T#0S;
fbController_P.Enable := TRUE;

fbController_P.Kp := 0;
fbController_P.Value.Setpoint := 100.0;
fbController_P.Value.Actual := 0;
AssertEquals_REAL(
	Actual := fbController_P.Execute(),
	Expected := 0,
	Delta := 0.0,
	Message := 'When gain is set to 0, output should be 0 after elapsed cycle time.');

fbController_P.Kp := 10;
fbController_P.Value.Setpoint := 100.0;
fbController_P.Value.Actual := 0;
AssertEquals_REAL(
	Actual := fbController_P.Execute(),
	Expected := 100.0 * 10,
	Delta := 0.0,
	Message := 'Incorrect result when gain set to 10 and value difference is 100.');
	
fbController_P.Kp := 20;
fbController_P.Value.Setpoint := 200.0;
fbController_P.Value.Actual := 0;
AssertEquals_REAL(
	Actual := fbController_P.Execute(),
	Expected := 200.0 * 20,
	Delta := 0.0,
	Message := 'Incorrect result when gain set to 10 and value difference is 200.');	
	
TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>