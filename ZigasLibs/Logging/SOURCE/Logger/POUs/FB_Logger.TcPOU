<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.14">
  <POU Name="FB_Logger" Id="{86b60fa4-cbc9-0995-00ad-63ce008210aa}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Logger EXTENDS FB_ErrorSource IMPLEMENTS I_Logger, I_LoggerConfig
VAR
	_fileHandler				: ZigaLibs_File.FB_FileHandler;
	_logEntries					: TcDynCollections.FB_Deque;
	_lastLogEntry				: Tc2_System.T_MaxString;
	_dequeueStatus				: TcDynCollections.T_Error;
	_state						: E_LoggerState;
	_localSystemTimeProvider	: ZigaLibs_Core.FB_LocalSystemTimeProvider;
	_localSystemTimeString		: Tc2_System.T_MaxString;
	_stringBuilder				: ZigaLibs_Core.FB_StringBuilder;
	_dateForLogName				: STRING;

	_currentFileName			: Tc2_System.T_MaxString;
	_varInfo					: ZigaLibs_Core.T_VarInfo;
END_VAR

VAR PERSISTENT
	_configBuilder : FB_LoggerConfigBuilder(THIS^);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[_localSystemTimeProvider();
_localSystemTimeString := GetLocalSystemTimeAsString();
_dequeueStatus := _logEntries._Error_Status;
THIS^.DeleteLogsMonitoring();


CASE _state OF 
	E_LoggerState.IDLE:
		IF _logEntries._Count <> 0 THEN
			
			_logEntries.Back(_lastLogEntry);
			// Error when looking up the deque of log entries...
			IF NOT THIS^.ValidateDequeue_IfFailedGoToErrorState() THEN
				RETURN;
			END_IF
			
			IF AddTimestampIfValidAndNewLine(_lastLogEntry) THEN
				_state := E_LoggerState.PREPARE_LOG;
			END_IF		
		END_IF

		
	E_LoggerState.PREPARE_LOG:
		_currentFileName := THIS^.GetLogName();
		_state := E_LoggerState.OPEN_FILE;
		
	E_LoggerState.OPEN_FILE:
		IF NOT _fileHandler.File.IsOpened THEN
			_fileHandler.Open(
				path := Configuration.FilePath, 
				name := _currentFileName, 
				mode := ZigaLibs_File.E_FileOpenMode.TEXT_APPEND,
				netId := Configuration.NetId);
			RETURN;
		END_IF	
		
		// Error opening the file
		IF _fileHandler.Error THEN
			THIS^.GenericError.Message := 'An error has occurred when opening the file!';
			THIS^.GenericError.Source := THIS^.InstancePath;
			THIS^.AdsError := _fileHandler.AdsError;
			_state := E_LoggerState.ERROR;
			RETURN;
		END_IF
		
		_state := E_LoggerState.WRITE_TO_FILE;

	E_LoggerState.WRITE_TO_FILE:
		IF NOT _fileHandler.WriteLine(_lastLogEntry) THEN
			RETURN;
		END_IF
		
		// Error writing to the file
		IF _fileHandler.Error THEN
			THIS^.GenericError.Message := 'An error has occurred when writing to file!';
			THIS^.GenericError.Source := THIS^.InstancePath;
			THIS^.AdsError := _fileHandler.AdsError;
			_state := E_LoggerState.ERROR;
			RETURN;
		END_IF
		
		// Remove the last entry, which was removed.
		_logEntries.Dequeue_At_Back();
		IF NOT THIS^.ValidateDequeue_IfFailedGoToErrorState() THEN
			RETURN;
		END_IF
		
		_state := E_LoggerState.CLOSE_FILE;
		
	E_LoggerState.CLOSE_FILE:
		IF NOT _fileHandler.Close() THEN
			RETURN;
		END_IF

		// Error closing file.
		IF _fileHandler.Error THEN
			THIS^.GenericError.Message := 'An error occured when closing the file!';
			THIS^.GenericError.Source := THIS^.InstancePath;
			THIS^.AdsError := _fileHandler.AdsError;
			_state := E_LoggerState.ERROR;
			RETURN;
		END_IF

		_state := E_LoggerState.IDLE;

	E_LoggerState.ERROR:
		THIS^.Error := TRUE;
		// Wait for reset to be called...
		
END_CASE]]></ST>
    </Implementation>
    <Method Name="AddTimestampIfValidAndNewLine" Id="{a9f8cbb1-04af-09e6-00f2-2d1dd952b9d2}">
      <Declaration><![CDATA[METHOD PROTECTED AddTimestampIfValidAndNewLine : BOOL
VAR_INPUT
	entry	: REFERENCE TO Tc2_System.T_MaxString;
END_VAR
VAR
	sb	: ZigaLibs_Core.FB_StringBuilder;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _localSystemTimeProvider.CurrentTime.IsValid THEN
	entry := sb.AddString(_localSystemTimeString)
	.AddString(': ')
	.AddString(entry)
	.AddString(ZigaLibs_Core.StringConstants.NewLine)
	.Create();
	AddTimestampIfValidAndNewLine := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Configuration" Id="{3733cbfb-c4fb-0cbc-3ba6-2317c49a40cd}">
      <Declaration><![CDATA[// Gets the logger configuration
{attribute 'monitoring':='call'}
PROPERTY Configuration : REFERENCE TO ST_LoggerConfiguration]]></Declaration>
      <Get Name="Get" Id="{608d8e85-4ef6-0f15-399b-c243db84c1e4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Configuration REF= _configBuilder.Configuration;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Configure" Id="{2f78940c-28a4-0c02-2e75-2687ffc5193e}">
      <Declaration><![CDATA[METHOD Configure : I_LoggerConfigBuilder
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Configure := _configBuilder;
_configBuilder.Start();]]></ST>
      </Implementation>
    </Method>
    <Method Name="DeleteLogsMonitoring" Id="{df88bea8-83d1-0814-3cc7-90cf29c36696}">
      <Declaration><![CDATA[METHOD PRIVATE DeleteLogsMonitoring
VAR_INST
	TonDeleteLogsTimer						: Tc2_Standard.TON;
	RtrigDelete								: Tc2_Standard.R_TRIG;
	bErrorDeletingFiles						: BOOL;
	stErrorDeletingFilesAdsError			: ZigaLibs_Core.ST_AdsError;
	dateForDeletion							: DT;
	currentTime								: Tc2_Utilities.TIMESTRUCT;
	RtrigConfigurationValid					: Tc2_Standard.R_TRIG;
	bCleanupDirectoryOnConfigurationApplied	: BOOL;
END_VAR
VAR
	sb 					: ZigaLibs_Core.FB_StringBuilder;
	deletedFiles		: TcDynCollections.FB_List;
	deletedFileIndex	: DINT;
	deletedFileName		: Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TonDeleteLogsTimer(IN := TRUE AND Configuration.DeleteAfterDays <> 0, PT := Configuration.DeleteCheckInterval);

RtrigConfigurationValid(CLK := Configuration.IsValid AND _localSystemTimeProvider.CurrentTime.IsValid);
IF RtrigConfigurationValid.Q THEN
	bCleanupDirectoryOnConfigurationApplied := TRUE;
END_IF

RtrigDelete(CLK := TonDeleteLogsTimer.Q OR bCleanupDirectoryOnConfigurationApplied);

IF _localSystemTimeProvider.CurrentTime.IsValid AND_THEN (TonDeleteLogsTimer.Q OR bCleanupDirectoryOnConfigurationApplied) THEN
	
	IF RtrigDelete.Q THEN
		dateForDeletion := Tc2_Utilities.SYSTEMTIME_TO_DT(_localSystemTimeProvider.CurrentTime.Value);
		dateForDeletion := dateForDeletion - (T#1D * Configuration.DeleteAfterDays);
	END_IF

	IF ZigaLibs_File.Utilities.Directory.DeleteFilesCreatedBefore(
		path := Configuration.FilePath,
		fileNameContains := Configuration.FileName,
		netId := Configuration.NetId,
		thresholdDate := dateForDeletion,
		error => bErrorDeletingFiles,
		errorInfo => stErrorDeletingFilesAdsError,
		deletedFiles => deletedFiles) 
	THEN
		bCleanupDirectoryOnConfigurationApplied := FALSE;
		TonDeleteLogsTimer(IN := FALSE);
		IF bErrorDeletingFiles THEN
			THIS^.LogError(sb.AddString(THIS^.InstancePath)
				.AddString('An error occurred while attempting to delete files!')
				.AddString(' Error info:').AddString(stErrorDeletingFilesAdsError.Message)
				.AddString('Source: ').AddString(stErrorDeletingFilesAdsError.Source)
				.Create());
			RETURN;
		END_IF
		
		sb.Reset().AddString('Cyclic files deletion finished. Deleted files created before ')
			.AddAny(dateForDeletion)
			.AddString('. Deleted ')
			.AddString(DINT_TO_STRING(deletedFiles._Count))
			.AddString(' files: ');
			
		FOR deletedFileIndex := deletedFiles._Begin TO deletedFiles._End BY 1 DO
			deletedFiles.Get(deletedFileIndex, deletedFileName);
			IF deletedFileIndex = deletedFiles._End THEN
				sb.AddString(deletedFileName);
				EXIT;
			END_IF
			
			sb.AddString(deletedFileName).AddString(', ');
		END_FOR
		
		THIS^.LogInfo(sb.Create());
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnqueueLogEntry" Id="{fc10775a-92bd-02ee-3fe5-4ec81d8f63a9}">
      <Declaration><![CDATA[METHOD PROTECTED EnqueueLogEntry
VAR_INPUT
	entry	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_logEntries.Enqueue_At_Front(entry);
THIS^.ValidateDequeue_IfFailedGoToErrorState();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetLocalSystemTimeAsString" Id="{aa732986-4455-041b-3382-1693460889a6}">
      <Declaration><![CDATA[METHOD PRIVATE GetLocalSystemTimeAsString : T_MaxString
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetLocalSystemTimeAsString :=_localSystemTimeProvider
	.ConvertToString()
	.DateTime(
		dateSeperator := '.',
		fillWithZeros := TRUE,
		IncludeMilliseconds := FALSE,
		timeFormat := ZigaLibs_Core.E_TimeFormat.YYMMDD_HHMMSS,
		timeOfDaySeperator := ':');]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetLogName" Id="{4ed4b280-ac59-0165-191f-c1ee2a65a930}">
      <Declaration><![CDATA[METHOD PRIVATE GetLogName : T_MaxString
VAR_INPUT
END_VAR
VAR_INST
	sDate 					: Tc2_System.T_MaxString;
	sFileName				: Tc2_System.T_MaxString;
	sb						: FB_StringBuilder;
	rollingIntervalReached	: Tc2_Standard.R_TRIG;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.Configuration.RollingInterval = 0 THEN
	GetLogName := Tc2_Standard.CONCAT(THIS^.Configuration.FileName, THIS^.Configuration.FileExtension);
	RETURN;
END_IF


rollingIntervalReached(CLK := (_localSystemTimeProvider.CurrentTime.Value.wHour MOD THIS^.Configuration.RollingInterval) = 0);

IF sFileName = '' OR rollingIntervalReached.Q THEN
	sDate := _localSystemTimeProvider
		.ConvertToString()
		.DateTime(
			timeFormat := ZigaLibs_Core.E_TimeFormat.YYMMDD,
			timeOfDaySeperator := '',
			dateSeperator := '',
			fillWithZeros := TRUE,
			IncludeMilliseconds := FALSE);
	
	GetLogName := sb.Reset()
		.AddString(Configuration.FileName)
		.AddString('_')
		.AddString(sDate)
		.AddString('_')
		.AddString(_localSystemTimeProvider.ConvertToString().Hour(fillWithZeros := TRUE))
		.AddString(Configuration.FileExtension)
		.Create();	
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogDefault" Id="{03e59e35-6844-0202-3974-90f98220400a}">
      <Declaration><![CDATA[(* Logs the message without any additions.*)
METHOD LogDefault
VAR_INPUT
	message	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.EnqueueLogEntry(message);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogError" Id="{60e0135f-a63a-002e-056e-f6dc14cffeb1}">
      <Declaration><![CDATA[(* Logs the message by adding the error header to the start.*)
METHOD LogError
VAR_INPUT
	message	: Tc2_System.T_MaxString;
END_VAR
VAR
	sb	: FB_StringBuilder;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.EnqueueLogEntry(
	sb.AddString(Configuration.LogLevelHeaders.Error)
		.AddString(message)
		.Create());

	]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogInfo" Id="{fd97ce6f-9592-08da-013c-a727bade2e2b}">
      <Declaration><![CDATA[(* Logs the message by adding the info header to the start.*)
METHOD LogInfo
VAR_INPUT
	message	: Tc2_System.T_MaxString;
END_VAR
VAR
	sb	: FB_StringBuilder;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.EnqueueLogEntry(
	sb.AddString(Configuration.LogLevelHeaders.Info)
		.AddString(message)
		.Create());]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogWarning" Id="{76f0a31c-738d-0885-349f-e0df017a7e19}">
      <Declaration><![CDATA[(* Logs the message by adding the info header to the start.*)
METHOD LogWarning
VAR_INPUT
	message	: Tc2_System.T_MaxString;
END_VAR
VAR
	sb	: FB_StringBuilder;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.EnqueueLogEntry(
	sb.AddString(Configuration.LogLevelHeaders.Warning)
		.AddString(message)
		.Create());]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{a5fbca4c-cccb-0c88-1d03-5c0956535ece}">
      <Declaration><![CDATA[METHOD Reset
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.Error THEN
	_fileHandler.Reset();
	THIS^.ResetError();
	_state := E_LoggerState.IDLE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValidateDequeue_IfFailedGoToErrorState" Id="{cfd71935-cdd3-01a8-1c03-798665fa6211}">
      <Declaration><![CDATA[// Looks at the dequeue status and sets the state to error, if osmething went wrong.
// Sets all the error information.
// If method returns FALSE, you should return from the current method step, upon next call the _state will be E_LoggerState.ERROR
METHOD PROTECTED ValidateDequeue_IfFailedGoToErrorState : BOOL
VAR
	sb	: ZigaLibs_Core.FB_StringBuilder;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Error when doing dequeuing...
IF NOT _dequeueStatus.bSTATUS THEN
	ValidateDequeue_IfFailedGoToErrorState := TRUE;
	RETURN;
END_IF

THIS^.Error := TRUE;
_varInfo := __VARINFO(_logEntries);

THIS^.GenericError.Message := sb.Reset()
	.AddString('Error when working with dynamic object: ')
	.AddString(_varInfo.TypeName)
	.Addstring('. Error: ')
	.AddString(_dequeueStatus.sSOURCE)
	.Create();

THIS^.GenericError.Code := _dequeueStatus.nCODE;
THIS^.GenericError.Source := sb.Reset()
	.AddString(THIS^.InstancePath)
	.AddString('.')
	.AddString(_varInfo.Symbol)
	.Create();;
	
_state := E_LoggerState.ERROR;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>