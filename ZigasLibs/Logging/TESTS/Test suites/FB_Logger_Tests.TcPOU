<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.14">
  <POU Name="FB_Logger_Tests" Id="{56576e73-0b8d-04b4-2a1d-ddaf5d4df6a5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FB_Logger_Tests EXTENDS FB_TestSuite
VAR
	fbLogger			: FB_Logger;
	fbFileHandler		: FB_FileHandler;
	fbLocalSystemTime	: ZigaLibs_Core.FB_LocalSystemTimeProvider;
END_VAR

VAR CONSTANT
	FOLDER_PATH	: Tc2_System.T_MaxString := 'Hard Disk\Tests\Logger';
	FILE_NAME	: Tc2_System.T_MaxString := 'FileName';
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbLogger.FileProperties.FileLocation := FOLDER_PATH;
fbLogger.FileProperties.FileName := FILE_NAME;
fbLogger();
fbLocalSystemTime();

	
Test01_LogError();
Test02_LogWarning();
Test03_LogInfo();
Test04_LogGeneric();]]></ST>
    </Implementation>
    <Method Name="Test01_LogError" Id="{d8907491-afae-0e50-10f7-6c16a49476f3}">
      <Declaration><![CDATA[METHOD Test01_LogError
VAR_INPUT
END_VAR

VAR_INST
	bExists						: BOOL;
	TonMaxDelayForFileToAppear	: TON := (PT :=T#2S);
	fbStringBuilder				: ZigaLibs_Core.FB_StringBuilder;
	sDateForLogName 			: Tc2_System.T_MaxString;
	sReadContent				: Tc2_System.T_MaxString;
	nLogErrorTestState			: UINT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test01_LogError');

CASE nLogErrorTestState OF
	0:
		IF fbLogger.Ready AND fbLocalSystemTime.CurrentTime.IsValid THEN
			fbLogger.LogError('Error text....');
			fbFileHandler.FileProperties.FileLocation := FOLDER_PATH;
				
			sDateForLogName := fbLocalSystemTime.ConvertToString().DateTime(
				timeFormat := ZigaLibs_Core.E_TimeFormat.YYMMDD,
				timeOfDaySeperator := '',
				dateSeperator := '',
				fillWithZeros := TRUE,
				IncludeMilliseconds := FALSE);
		
			sDateForLogName := fbStringBuilder.Reset()
				.AddString(str := sDateForLogName)
				.AddString(str := '_')
				.AddString(str := fbLocalSystemTime.ConvertToString().Hour(fillWithZeros := TRUE))
				.Create();
				
			fbFileHandler.FileProperties.FileName := fbStringBuilder.Reset()
				.AddString(str := FILE_NAME)
				.AddString(str := '_')
				.AddString(str := sDateForLogName)
				.AddString(str := '.txt')
				.Create();
				nLogErrorTestState := nLogErrorTestState + 1;
			END_IF
			
		1:
			TonMaxDelayForFileToAppear(IN := fbLogger.Ready);
			IF TonMaxDelayForFileToAppear.Q AND_THEN fbFileHandler.Exists(refFileExists := bExists) THEN
				AssertTrue( 
					Condition := bExists,
					Message := 'Log file was not created!');
				nLogErrorTestState := nLogErrorTestState + 1;
			END_IF
			
		2:
			IF fbFileHandler.Error THEN
				AssertTrue(
					Condition := FALSE, 
					Message := 'Unexpected error occurred while reading content from log file!');
					TcUnit.TEST_FINISHED();
			END_IF
			
			IF fbFileHandler.Read(sReadContent) THEN
				AssertTrue(
					Condition := Tc2_Standard.FIND(
						STR1 := sReadContent, 
						STR2 := fbLogger.LogLevelHeaders.Error) <> 0,
					Message := 'Error header not found in the read content of the log file!');

				AssertTrue(
					Condition := Tc2_Standard.FIND(
						STR1 := sReadContent, 
						STR2 := 'Error text....') <> 0,
					Message := 'Message provided to the log method was not found in the contents of the file!');
					
				nLogErrorTestState := nLogErrorTestState + 1;
			END_IF
			
		3:
			IF fbFileHandler.Delete() THEN
				nLogErrorTestState := nLogErrorTestState + 1;
				TcUnit.TEST_FINISHED();
			END_IF	
			
		4:	
			;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test02_LogWarning" Id="{4fe293bd-ef31-0f9e-0f9c-a610eddd16dc}">
      <Declaration><![CDATA[METHOD Test02_LogWarning
VAR_INPUT
END_VAR

VAR_INST
	bExists						: BOOL;
	TonMaxDelayForFileToAppear	: TON := (PT :=T#2S);
	fbStringBuilder				: ZigaLibs_Core.FB_StringBuilder;
	sDateForLogName 			: Tc2_System.T_MaxString;
	sReadContent				: Tc2_System.T_MaxString;
	nLogWarningTestState			: UINT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test02_LogWarning');

IF TcUnit.IS_TEST_FINISHED('Test01_LogError') THEN	
	CASE nLogWarningTestState OF
		0:
			IF fbLogger.Ready AND fbLocalSystemTime.CurrentTime.IsValid THEN
				fbLogger.LogWarning('Warning text....');
				fbFileHandler.FileProperties.FileLocation := FOLDER_PATH;
					
				sDateForLogName := fbLocalSystemTime.ConvertToString().DateTime(
					timeFormat := ZigaLibs_Core.E_TimeFormat.YYMMDD,
					timeOfDaySeperator := '',
					dateSeperator := '',
					fillWithZeros := TRUE,
					IncludeMilliseconds := FALSE);
			
				sDateForLogName := fbStringBuilder.Reset()
					.AddString(str := sDateForLogName)
					.AddString(str := '_')
					.AddString(str := fbLocalSystemTime.ConvertToString().Hour(fillWithZeros := TRUE))
					.Create();
					
				fbFileHandler.FileProperties.FileName := fbStringBuilder.Reset()
					.AddString(str := FILE_NAME)
					.AddString(str := '_')
					.AddString(str := sDateForLogName)
					.AddString(str := '.txt')
					.Create();
					nLogWarningTestState := nLogWarningTestState + 1;
				END_IF
				
			1:
				TonMaxDelayForFileToAppear(IN := fbLogger.Ready);
				IF TonMaxDelayForFileToAppear.Q AND_THEN fbFileHandler.Exists(refFileExists := bExists) THEN
					AssertTrue( 
						Condition := bExists,
						Message := 'Log file was not created!');
					nLogWarningTestState := nLogWarningTestState + 1;
				END_IF
				
			2:
				IF fbFileHandler.Error THEN
					AssertTrue(
						Condition := FALSE, 
						Message := 'Unexpected error occurred while reading content from log file!');
						TcUnit.TEST_FINISHED();
				END_IF
				
				IF fbFileHandler.Read(sReadContent) THEN
					AssertTrue(
						Condition := Tc2_Standard.FIND(
							STR1 := sReadContent, 
							STR2 := fbLogger.LogLevelHeaders.Warning) <> 0,
						Message := 'Warning header not found in the read content of the log file!');
	
					AssertTrue(
						Condition := Tc2_Standard.FIND(
							STR1 := sReadContent, 
							STR2 := 'Warning text....') <> 0,
						Message := 'Message provided to the log method was not found in the contents of the file!');
						
					nLogWarningTestState := nLogWarningTestState + 1;
				END_IF
				
			3:
				IF fbFileHandler.Delete() THEN
					TcUnit.TEST_FINISHED();
					nLogWarningTestState := nLogWarningTestState + 1;
				END_IF	
				
			4:	
				;
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test03_LogInfo" Id="{36be4fe7-4f92-0086-3d7c-e81a29d0db62}">
      <Declaration><![CDATA[METHOD Test03_LogInfo
VAR_INPUT
END_VAR
VAR_INST
	bExists						: BOOL;
	TonMaxDelayForFileToAppear	: TON := (PT :=T#2S);
	fbStringBuilder				: ZigaLibs_Core.FB_StringBuilder;
	sDateForLogName 			: Tc2_System.T_MaxString;
	sReadContent				: Tc2_System.T_MaxString;
	nLogInfoTestState			: UINT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test03_LogInfo');

IF TcUnit.IS_TEST_FINISHED('Test02_LogWarning') THEN	
	CASE nLogInfoTestState OF
		0:
			IF fbLogger.Ready AND fbLocalSystemTime.CurrentTime.IsValid THEN
				fbLogger.LogInfo('Info text....');
				fbFileHandler.FileProperties.FileLocation := FOLDER_PATH;
					
				sDateForLogName := fbLocalSystemTime.ConvertToString().DateTime(
					timeFormat := ZigaLibs_Core.E_TimeFormat.YYMMDD,
					timeOfDaySeperator := '',
					dateSeperator := '',
					fillWithZeros := TRUE,
					IncludeMilliseconds := FALSE);
			
				sDateForLogName := fbStringBuilder.Reset()
					.AddString(str := sDateForLogName)
					.AddString(str := '_')
					.AddString(str := fbLocalSystemTime.ConvertToString().Hour(fillWithZeros := TRUE))
					.Create();
					
				fbFileHandler.FileProperties.FileName := fbStringBuilder.Reset()
					.AddString(str := FILE_NAME)
					.AddString(str := '_')
					.AddString(str := sDateForLogName)
					.AddString(str := '.txt')
					.Create();
					nLogInfoTestState := nLogInfoTestState + 1;
				END_IF
				
			1:
				TonMaxDelayForFileToAppear(IN := fbLogger.Ready);
				IF TonMaxDelayForFileToAppear.Q AND_THEN fbFileHandler.Exists(refFileExists := bExists) THEN
					AssertTrue( 
						Condition := bExists,
						Message := 'Log file was not created!');
					nLogInfoTestState := nLogInfoTestState + 1;
				END_IF
				
			2:
				IF fbFileHandler.Error THEN
					AssertTrue(
						Condition := FALSE, 
						Message := 'Unexpected error occurred while reading content from log file!');
						TcUnit.TEST_FINISHED();
				END_IF
				
				IF fbFileHandler.Read(sReadContent) THEN
					AssertTrue(
						Condition := Tc2_Standard.FIND(
							STR1 := sReadContent, 
							STR2 := fbLogger.LogLevelHeaders.Info) <> 0,
						Message := 'Info header not found in the read content of the log file!');
	
					AssertTrue(
						Condition := Tc2_Standard.FIND(
							STR1 := sReadContent, 
							STR2 := 'Info text....') <> 0,
						Message := 'Message provided to the log method was not found in the contents of the file!');
						
					nLogInfoTestState := nLogInfoTestState + 1;
				END_IF
				
			3:
				IF fbFileHandler.Delete() THEN
					nLogInfoTestState := nLogInfoTestState + 1;
					TcUnit.TEST_FINISHED();
				END_IF	
				
			4:
				;
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test04_LogGeneric" Id="{85c6ce0a-a15b-043a-2e4c-eb245e65cfdf}">
      <Declaration><![CDATA[METHOD Test04_LogGeneric
VAR_INST
	bExists						: BOOL;
	TonMaxDelayForFileToAppear	: TON := (PT :=T#2S);
	fbStringBuilder				: ZigaLibs_Core.FB_StringBuilder;
	sDateForLogName 			: Tc2_System.T_MaxString;
	sReadContent				: Tc2_System.T_MaxString;
	nGenericTestState			: UINT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test04_LogGeneric');

IF TcUnit.IS_TEST_FINISHED('Test03_LogInfo') THEN	
	CASE nGenericTestState OF
		0:
			IF fbLogger.Ready AND fbLocalSystemTime.CurrentTime.IsValid THEN
				fbLogger.LogDefault('Generic text....');
				fbFileHandler.FileProperties.FileLocation := FOLDER_PATH;
					
				sDateForLogName := fbLocalSystemTime.ConvertToString().DateTime(
					timeFormat := ZigaLibs_Core.E_TimeFormat.YYMMDD,
					timeOfDaySeperator := '',
					dateSeperator := '',
					fillWithZeros := TRUE,
					IncludeMilliseconds := FALSE);
			
				sDateForLogName := fbStringBuilder.Reset()
					.AddString(str := sDateForLogName)
					.AddString(str := '_')
					.AddString(str := fbLocalSystemTime.ConvertToString().Hour(fillWithZeros := TRUE))
					.Create();
					
				fbFileHandler.FileProperties.FileName := fbStringBuilder.Reset()
					.AddString(str := FILE_NAME)
					.AddString(str := '_')
					.AddString(str := sDateForLogName)
					.AddString(str := '.txt')
					.Create();
					nGenericTestState := nGenericTestState + 1;
				END_IF
				
			1:
				TonMaxDelayForFileToAppear(IN := fbLogger.Ready);
				IF TonMaxDelayForFileToAppear.Q AND_THEN fbFileHandler.Exists(refFileExists := bExists) THEN
					AssertTrue( 
						Condition := bExists,
						Message := 'Log file was not created!');
					nGenericTestState := nGenericTestState + 1;
				END_IF
				
			2:
				IF fbFileHandler.Error THEN
					AssertTrue(
						Condition := FALSE, 
						Message := 'Unexpected error occurred while reading content from log file!');
						TcUnit.TEST_FINISHED();
				END_IF
				
				IF fbFileHandler.Read(sReadContent) THEN
					AssertTrue(
						Condition := Tc2_Standard.FIND(
							STR1 := sReadContent, 
							STR2 := fbLogger.LogLevelHeaders.Error) = 0,
						Message := 'Error header was found in the read content of the generic log file!');
	
					AssertTrue(
						Condition := Tc2_Standard.FIND(
							STR1 := sReadContent, 
							STR2 := fbLogger.LogLevelHeaders.Warning) = 0,
						Message := 'Warning header was found in the read content of the generic log file!');
					
					AssertTrue(
						Condition := Tc2_Standard.FIND(
							STR1 := sReadContent, 
							STR2 := fbLogger.LogLevelHeaders.Info) = 0,
						Message := 'Info header was found in the read content of the generic log file!');
	
					AssertTrue(
						Condition := Tc2_Standard.FIND(
							STR1 := sReadContent, 
							STR2 := 'Generic text....') <> 0,
						Message := 'Message provided to the log method was not found in the contents of the file!');
						
					nGenericTestState := nGenericTestState + 1;
				END_IF
				
			3:
				IF fbFileHandler.Delete() THEN
					TcUnit.TEST_FINISHED();
					nGenericTestState := nGenericTestState + 1;
				END_IF	
				
			4:
				;
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>