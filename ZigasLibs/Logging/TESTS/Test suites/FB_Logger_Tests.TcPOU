<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.14">
  <POU Name="FB_Logger_Tests" Id="{56576e73-0b8d-04b4-2a1d-ddaf5d4df6a5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FB_Logger_Tests EXTENDS FB_TestSuite
VAR
	_logger				: FB_Logger;
	_fileHandler		: ZigaLibs_File.FB_FileHandler;
	_localSystemTime	: ZigaLibs_Core.FB_LocalSystemTimeProvider;
	_loggerConfigured	: BOOL;
END_VAR

VAR CONSTANT
	FOLDER_PATH	: Tc2_System.T_MaxString := 'C:/';
	NET_ID		: Tc2_System.T_AmsNetID := '192.168.56.1.1.1';
	LOG_NAME	: Tc2_System.T_MaxString := 'MyLog';
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Configure logger...
IF NOT _loggerConfigured THEN
	_logger.Configure()
		.SetLogFilePath(FOLDER_PATH)
		.SetLogFileName(LOG_NAME)
		.SetLogExtension('log')
		.SetRollingInterval(6)
		.SetNetId(NET_ID)
		.DeleteLogsAfter(1, T#1H)
		.Apply(FALSE); 
	_loggerConfigured := TRUE;
END_IF

_logger();
_localSystemTime();

	
Test01_LogError();
Test02_LogWarning();
Test03_LogInfo();
Test04_LogGeneric();
Test05_LogConfiguration_RollingIntervalSetTo0_ExpectOnlyFileName();
Test06_FileExtension_DotAddedAutomaticallyIfNotProvided();
Test07_ConfigurationDoesNotChangeUntilApplyIsCalled();]]></ST>
    </Implementation>
    <Method Name="Test01_LogError" Id="{d8907491-afae-0e50-10f7-6c16a49476f3}">
      <Declaration><![CDATA[METHOD Test01_LogError
VAR_INST
	bExists						: BOOL;
	TonMaxDelayForFileToAppear	: TON := (PT :=T#2S);
	fbStringBuilder				: ZigaLibs_Core.FB_StringBuilder;
	sDateForLogName 			: Tc2_System.T_MaxString;
	sReadContent				: STRING(1000);
	nLogErrorTestState			: UINT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TcUnit.TEST_ORDERED('Test01_LogError')THEN
	CASE nLogErrorTestState OF
		0: 
			_logger.LogError('Error text....');
			nLogErrorTestState := nLogErrorTestState + 1;
		
		1:	
			IF _logger.Error THEN
				AssertTrue(
					Condition := FALSE, 
					Message := 'Unexpected error occurred when creating the log.');
					TcUnit.TEST_FINISHED();
					RETURN;
			END_IF
			
			TonMaxDelayForFileToAppear(IN := TRUE);
			IF TonMaxDelayForFileToAppear.Q AND_THEN 
				ZigaLibs_File.Utilities.File.Exists(
					name := _logger._fileHandler.File.Name,
					path := _logger._fileHandler.File.Path,
					NetId := _logger._fileHandler.File.NetId,
					Exists => bExists) 
			THEN
				AssertTrue(Condition := bExists,
					Message := 'Log file was not created!');
				nLogErrorTestState := nLogErrorTestState + 1;
			END_IF
				
		2:
			IF NOT _fileHandler.File.IsOpened THEN
				_fileHandler.Open(
					name := _logger._fileHandler.File.Name,
					path := _logger._fileHandler.File.Path,
					NetId := _logger._fileHandler.File.NetId,
					mode := ZigaLibs_File.E_FileOpenMode.TEXT_READ_MUST_EXIST);
				RETURN;
			END_IF
			
			IF _fileHandler.Read(sReadContent) THEN
				AssertTrue(
					Condition := ZigaLibs_Core.StringHelper.FindStringWithin(
						sReadContent,_logger.Configuration.LogLevelHeaders.Error),
					Message := 'Error header not found in the read content of the log file!');
	
				AssertTrue(
					Condition := ZigaLibs_Core.StringHelper.FindStringWithin(sReadContent, 'Error text....'),
					Message := 'Message provided to the log method was not found in the contents of the file!');
					
				nLogErrorTestState := nLogErrorTestState + 1;
			END_IF
			
		3:
			IF _fileHandler.Close() THEN
				nLogErrorTestState := nLogErrorTestState + 1;
			END_IF	
			
		4:	
			IF ZigaLibs_File.Utilities.File.Delete(
				name := _logger._fileHandler.File.Name,
				path := _logger._fileHandler.File.Path,
				NetId := _logger._fileHandler.File.NetId,) 
			THEN
				TcUnit.TEST_FINISHED();
			END_IF
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test02_LogWarning" Id="{4fe293bd-ef31-0f9e-0f9c-a610eddd16dc}">
      <Declaration><![CDATA[METHOD Test02_LogWarning
VAR_INPUT
END_VAR

VAR_INST
	bExists						: BOOL;
	TonMaxDelayForFileToAppear	: TON := (PT :=T#2S);
	fbStringBuilder				: ZigaLibs_Core.FB_StringBuilder;
	sDateForLogName 			: Tc2_System.T_MaxString;
	sReadContent				: STRING(1000);
	nLogWarningTestState		: UINT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TcUnit.TEST_ORDERED('Test02_LogWarning') THEN
	CASE nLogWarningTestState OF
		0: 
			_logger.LogWarning('Warning text....');
			nLogWarningTestState := nLogWarningTestState + 1;
		1:	
			IF _logger.Error THEN
				AssertTrue(
					Condition := FALSE, 
					Message := 'Unexpected error occurred when creating the log.');
					TcUnit.TEST_FINISHED();
					RETURN;
			END_IF
			
			TonMaxDelayForFileToAppear(IN := TRUE);
			IF TonMaxDelayForFileToAppear.Q AND_THEN 
				ZigaLibs_File.Utilities.File.Exists(
					name := _logger._fileHandler.File.Name,
					path := _logger._fileHandler.File.Path,
					NetId := _logger._fileHandler.File.NetId,
					Exists => bExists) 
			THEN
				AssertTrue( 
					Condition := bExists,
					Message := 'Log file was not created!');
				nLogWarningTestState := nLogWarningTestState + 1;
			END_IF
				
		2:
			IF NOT _fileHandler.File.IsOpened THEN
				_fileHandler.Open(
					name := _logger._fileHandler.File.Name,
					path := _logger._fileHandler.File.Path,
					NetId := _logger._fileHandler.File.NetId,
					mode := ZigaLibs_File.E_FileOpenMode.TEXT_READ_MUST_EXIST);
				RETURN;
			END_IF
			
			IF _fileHandler.Read(sReadContent) THEN
				AssertTrue(
					Condition := ZigaLibs_Core.StringHelper.FindStringWithin(sReadContent, _logger.Configuration.LogLevelHeaders.Warning),
					Message := 'Warning header not found in the read content of the log file!');
	
				AssertTrue(
					Condition := ZigaLibs_Core.StringHelper.FindStringWithin(sReadContent, 'Warning text....'),
					Message := 'Message provided to the log method was not found in the contents of the file!');
					
				nLogWarningTestState := nLogWarningTestState + 1;
			END_IF
			
		3:
			IF _fileHandler.Close() THEN
				nLogWarningTestState := nLogWarningTestState + 1;
			END_IF	
			
		4:	
			IF ZigaLibs_File.Utilities.File.Delete(
				name := _logger._fileHandler.File.Name,
				path := _logger._fileHandler.File.Path,
				NetId := _logger._fileHandler.File.NetId,) 
			THEN
				TcUnit.TEST_FINISHED();
			END_IF
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test03_LogInfo" Id="{36be4fe7-4f92-0086-3d7c-e81a29d0db62}">
      <Declaration><![CDATA[METHOD Test03_LogInfo
VAR_INPUT
END_VAR
VAR_INST
	bExists						: BOOL;
	TonMaxDelayForFileToAppear	: TON := (PT :=T#2S);
	fbStringBuilder				: ZigaLibs_Core.FB_StringBuilder;
	sDateForLogName 			: Tc2_System.T_MaxString;
	sReadContent				: STRING(1000);
	nLogInfoState				: UINT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TcUnit.TEST_ORDERED('Test03_LogInfo') THEN
	CASE nLogInfoState OF
		0: 
			_logger.LogInfo('Info text....');
			nLogInfoState := nLogInfoState + 1;
		1:	
			IF _logger.Error THEN
				AssertTrue(
					Condition := FALSE, 
					Message := 'Unexpected error occurred when creating the log.');
					TcUnit.TEST_FINISHED();
					RETURN;
			END_IF
			
			
			TonMaxDelayForFileToAppear(IN := TRUE);
			IF TonMaxDelayForFileToAppear.Q AND_THEN 
				ZigaLibs_File.Utilities.File.Exists(
					name := _logger._fileHandler.File.Name,
					path := _logger._fileHandler.File.Path,
					NetId := _logger._fileHandler.File.NetId,
					Exists => bExists) 
			THEN
				AssertTrue( 
					Condition := bExists,
					Message := 'Log file was not created!');
				nLogInfoState := nLogInfoState + 1;
			END_IF
				
		2:
			IF NOT _fileHandler.File.IsOpened THEN
				_fileHandler.Open(
					name := _logger._fileHandler.File.Name,
					path := _logger._fileHandler.File.Path,
					NetId := _logger._fileHandler.File.NetId,
					mode := ZigaLibs_File.E_FileOpenMode.TEXT_READ_MUST_EXIST);
				RETURN;
			END_IF
			
			IF _fileHandler.Read(sReadContent) THEN
				AssertTrue(
					Condition := ZigaLibs_Core.StringHelper.FindStringWithin(sReadContent, _logger.Configuration.LogLevelHeaders.Info),
					Message := 'Info header not found in the read content of the log file!');
	
				AssertTrue(
					Condition := ZigaLibs_Core.StringHelper.FindStringWithin(sReadContent, 'Info text....'),
					Message := 'Message provided to the log method was not found in the contents of the file!');
					
				nLogInfoState := nLogInfoState + 1;
			END_IF
			
		3:
			IF _fileHandler.Close() THEN
				nLogInfoState := nLogInfoState + 1;
			END_IF	
			
		4:	
			IF ZigaLibs_File.Utilities.File.Delete(
				name := _logger._fileHandler.File.Name,
				path := _logger._fileHandler.File.Path,
				NetId := _logger._fileHandler.File.NetId,) 
			THEN
				TcUnit.TEST_FINISHED();
			END_IF
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test04_LogGeneric" Id="{85c6ce0a-a15b-043a-2e4c-eb245e65cfdf}">
      <Declaration><![CDATA[METHOD Test04_LogGeneric
VAR_INST
	bExists						: BOOL;
	TonMaxDelayForFileToAppear	: TON := (PT :=T#2S);
	fbStringBuilder				: ZigaLibs_Core.FB_StringBuilder;
	sDateForLogName 			: Tc2_System.T_MaxString;
	sReadContent				: STRING(1000);
	nLogGenericState			: UINT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TcUnit.TEST_ORDERED('Test04_LogGeneric') THEN
	CASE nLogGenericState OF
		0: 
			_logger.LogDefault('Default text....');
			nLogGenericState := nLogGenericState + 1;
			
		1:	
			IF _logger.Error THEN
				AssertTrue(
					Condition := FALSE, 
					Message := 'Unexpected error occurred when creating the log.');
					TcUnit.TEST_FINISHED();
					RETURN;
			END_IF
			
			TonMaxDelayForFileToAppear(IN := TRUE);
			IF TonMaxDelayForFileToAppear.Q AND_THEN 
				ZigaLibs_File.Utilities.File.Exists(
					name := _logger._fileHandler.File.Name,
					path := _logger._fileHandler.File.Path,
					NetId := _logger._fileHandler.File.NetId,
					Exists => bExists) 
			THEN
				AssertTrue( 
					Condition := bExists,
					Message := 'Log file was not created!');
				nLogGenericState := nLogGenericState + 1;
			END_IF
				
		2:
			IF NOT _fileHandler.File.IsOpened THEN
				_fileHandler.Open(
					name := _logger._fileHandler.File.Name,
					path := _logger._fileHandler.File.Path,
					NetId := _logger._fileHandler.File.NetId,
					mode := ZigaLibs_File.E_FileOpenMode.TEXT_READ_MUST_EXIST);
				RETURN;
			END_IF
			
			IF _fileHandler.Read(sReadContent) THEN
				AssertFalse(
					Condition := ZigaLibs_Core.StringHelper.FindStringWithin(sReadContent, _logger.Configuration.LogLevelHeaders.Info),
					Message := 'Info header was found in the read content of the log file!');
					
				AssertFalse(
					Condition := ZigaLibs_Core.StringHelper.FindStringWithin(sReadContent, _logger.Configuration.LogLevelHeaders.Warning),
					Message := 'Warning header was found in the read content of the log file!');
				
				AssertFalse(
					Condition := ZigaLibs_Core.StringHelper.FindStringWithin(sReadContent, _logger.Configuration.LogLevelHeaders.Error),
					Message := 'Error header was found in the read content of the log file!');
					
				AssertTrue(
					Condition := ZigaLibs_Core.StringHelper.FindStringWithin(sReadContent, 'Default text....'),
					Message := 'Default log message not found.');
					
				nLogGenericState := nLogGenericState + 1;
			END_IF
			
		3:
			IF _fileHandler.Close() THEN
				nLogGenericState := nLogGenericState + 1;
			END_IF	
			
		4:	
			IF ZigaLibs_File.Utilities.File.Delete(
				name := _logger._fileHandler.File.Name,
				path := _logger._fileHandler.File.Path,
				NetId := _logger._fileHandler.File.NetId,) 
			THEN
				TcUnit.TEST_FINISHED();
			END_IF
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test05_LogConfiguration_RollingIntervalSetTo0_ExpectOnlyFileName" Id="{97e3200b-eb50-0b82-3ea2-35d78bb226d7}">
      <Declaration><![CDATA[METHOD Test05_LogConfiguration_RollingIntervalSetTo0_ExpectOnlyFileName
VAR_INPUT
END_VAR
VAR_INST
	step	: INT;
	fileExists	: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TcUnit.TEST_ORDERED('Test05_LogConfiguration_RollingIntervalSetTo0_ExpectOnlyFileName') THEN
	CASE step OF
		0:	
			_logger.Configure()
				.SetRollingInterval(0)
				.Apply(FALSE);
			step := step + 1;
			
		1:
			_logger.LogInfo('test..');	
			step := step + 1;
			
		2:
			IF ZigaLibs_File.Utilities.File.Exists(
				FOLDER_PATH, 
				TC2_Standard.CONCAT(LOG_NAME, _logger.Configuration.FileExtension), 
				NET_ID, 
				result => fileExists) 
			THEN
				AssertTrue(fileExists, 'Setting rolling interval to 0, the expected file was not craeted.');
				step := step + 1;
			END_IF
			
		3:
			IF fileExists THEN
				IF ZigaLibs_File.Utilities.File.Delete(
					FOLDER_PATH, 
					TC2_Standard.CONCAT(LOG_NAME, _logger.Configuration.FileExtension), 
					NET_ID) 
				THEN
					TcUnit.TEST_FINISHED();	
				END_IF
			END_IF
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test06_FileExtension_DotAddedAutomaticallyIfNotProvided" Id="{26977ca3-c63b-036e-1559-0c611fd677ef}">
      <Declaration><![CDATA[METHOD Test06_FileExtension_DotAddedAutomaticallyIfNotProvided
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TcUnit.TEST_ORDERED('Test06_FileExtension_DotAddedAutomaticallyIfNotProvided') THEN
	_logger.Configure().SetLogExtension('NoDotAdded').Apply(FALSE);
	AssertEquals_STRING(
		'.NoDotAdded',
		_logger.Configuration.FileExtension,
		'If no dot is prepended to the file extension, it should be added automatically.');
		
	_logger.Configure().SetLogExtension('.DotAdded').Apply(FALSE);
	AssertEquals_STRING(
		'.DotAdded',
		_logger.Configuration.FileExtension,
		'If dot is prepended to the file extension, it should not be added automatically as it already exists.');
	TcUnit.TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test07_ConfigurationDoesNotChangeUntilApplyIsCalled" Id="{31e4a934-6db9-09cd-0814-a3cb13f21905}">
      <Declaration><![CDATA[METHOD Test07_ConfigurationDoesNotChangeUntilApplyIsCalled
VAR_INPUT
END_VAR
VAR
	originalConfiguration	: ST_LoggerConfiguration;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TcUnit.TEST_ORDERED('Test07_ConfigurationDoesNotChangeUntilApplyIsCalled') THEN
	originalConfiguration := _logger.Configuration;
	
	_logger.Configure().SetLogFileName('lalal');
	AssertEquals_STRING(originalConfiguration.FileName, _logger.Configuration.FileName,
		'Until apply is called, the configuration should not be applied.');
		
	_logger.Configure().SetLogFileName('test123').Apply(FALSE);
	AssertEquals_STRING('test123', _logger.Configuration.FileName,
		'When apply is called, the configuration should be applied.');
		
	TcUnit.TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>