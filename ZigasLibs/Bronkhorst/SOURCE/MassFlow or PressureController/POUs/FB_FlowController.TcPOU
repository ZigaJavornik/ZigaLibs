<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_FlowController" Id="{4ae6103e-c357-05b9-305d-07911a2f3e97}" SpecialFunc="None">
    <Declaration><![CDATA[(* Bronkhorst mass flow/pressure controller device implementation.
============================================================================================================================================================================================
CONSTRUCTOR TEMPLATE - COPY EVERYTHING BELOW, ADJUST PARAMETERS ACCORDINGLY!
============================================================================================================================================================================================	
(fPredictedFlowCapacity	:= 100, // [REAL] Predicted flow capacity. If logger is provided and the read capacity differs, the error will be reported by the logger.
sPredictedGasType := N2, // [STRING] Predicted gas type. If logger is provided and the read gas type differs, the error will be reported by the logger.
sPredictedFlowUnit := sccm, // [STRING] Predicted flow unit. If logger is provided and the read flow unit differs, the error will be reported by the logger.
iLogger := 0, // [ZigaLibs_Core.I_LoggerEx] Logger implementation provided, set to 0 if not required.
mode := E_ControllerMode.Controlling); // [E_ControllerMode] Controller initial mode
============================================================================================================================================================================================
*)

FUNCTION_BLOCK FB_FlowController EXTENDS ZigaLibs_Core.FB_HasInstanceNameAndPath IMPLEMENTS ZigaLibs_Core.I_ReadsCoE
VAR_INPUT
	bEnable			: BOOL;	// Enables controller
	fSetpoint		: REAL;	// Setpoint to the controller
END_VAR

VAR_OUTPUT
	fMeassuredValue	: REAL;	// Measured value, reported from the controller
	fValvePosition	: REAL;	// Valve position
END_VAR

// IO
VAR
	Inputs	AT %I*	: ST_ControllerInputs;
	Outputs	AT %Q* 	: ST_ControllerOutputs;
END_VAR

VAR
	bFirstExecution			: BOOL := TRUE;
	_stringBuilder			: ZigaLibs_Core.FB_StringBuilder;
	_CoeList				: ST_ControllerCoeList;
	_logPrefix				: STRING := CONCAT(STR1 := InstanceName, STR2 := ' :');
	_logger					: REFERENCE TO ZigaLibs_Logging.I_Logger;
	_writeLogs				: BOOL;
	_ethercatBoxName		: Tc2_System.T_MaxString;
	{attribute 'hide'} 
	_mode					: E_ControllerMode;	// Hide since mode switching should be logged (done inside the property setter)
	_status					: ST_ControllerStatus;
	_predictedFlowCapacity	: REAL;
	_predictedGasType		: STRING;
	_predictedFlowUnit		: STRING;
	_writeModeRequired		: BOOL;
	_validateModeWrite		: BOOL;
	_controlModeTmp			: E_ControllerMode;
	_coeReadWrite			: ZigaLibs_Core.FB_CoeReadWrite;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Outputs.ControlByte := BOOL_TO_BYTE(bEnable);

IF bEnable THEN
	Outputs.Setpoint := CalculateSetpointValue();
ELSE
	Outputs.Setpoint := 0;
END_IF

fMeassuredValue := CalculateMeasuredValue();

IF bFirstExecution THEN
	IF ReadCoE() THEN
		bFirstExecution := FALSE;
	END_IF
END_IF

IF _writeModeRequired AND_THEN _coeReadWrite.WriteAny(
		CoeEntry := ADR(_CoeList.ControlMode),
		Value := _mode,
		SlaveAddr := Inputs.AmsAddr)
THEN
	IF _writeLogs THEN
		_logger.LogInfo(message := _stringBuilder.Reset()
			.AddString(str := _logPrefix)
			.AddString(str := 'Finished writing control mode for EtherCAT device ')
			.AddWithDblQuotationMarks(str := _ethercatBoxName)
			.AddString(str := '.')
			.Create());
	END_IF
	_validateModeWrite := TRUE;
	_writeModeRequired := FALSE;
END_IF

IF _validateModeWrite AND_THEN _coeReadWrite.ReadAny(
		CoeEntry := ADR(_CoeList.ControlMode),
		Value := _CoeList.ControlMode.Value,
		SlaveAddr := Inputs.AmsAddr)
THEN
	_validateModeWrite := FALSE;
	IF _writeLogs THEN
		IF _CoeList.ControlMode.Value <> _mode THEN
			// This allows for using TO_STRING on the enum value for better logging experience.
			_controlModeTmp := _CoeList.ControlMode.Value;
			_logger.LogError(message := _stringBuilder.Reset()
				.AddString(str := _logPRefix)
				.AddString('Control mode validation failed! Actual mode read is ')
				.AddWithDblQuotationMarks(str := TO_STRING(_controlModeTmp))
				.AddString(' required mode is ')
				.AddWithDblQuotationMarks(str := TO_STRING(_mode))
				.Create());
		ELSE
			_logger.LogInfo(message := _stringBuilder.Reset()
				.AddString(str := _logPrefix)
				.AddString('Control mode setting validation successful.')
				.Create());
		END_IF
	END_IF
END_IF

// Status of the controller
_status.ControllerOn := Inputs.StatusWord.0;
_status.SelfOptimization := Inputs.StatusWord.1;
_status.ManualMode := Inputs.StatusWord.2;
_status.SetpointSwitch := Inputs.StatusWord.3;
_status.OptimizationError := Inputs.StatusWord.4;
_status.DataNotValid := Inputs.StatusWord.8;
_status.Overload := Inputs.StatusWord.9;
_status.NetOverload := Inputs.StatusWord.10;]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{1fe8449f-b94f-0219-22c8-3649cc7cb3b5}" />
    <Method Name="CalculateMeasuredValue" Id="{ea423dd2-8de1-0f73-3034-64ced1bcd87c}">
      <Declaration><![CDATA[METHOD PRIVATE CalculateMeasuredValue : REAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CalculateMeasuredValue :=  UINT_TO_REAL(Inputs.MeassuredValue) / LREAL_TO_REAL(EXPT(10,_CoeList.DecimalDigits.Value));]]></ST>
      </Implementation>
    </Method>
    <Method Name="CalculateSetpointValue" Id="{86689ca6-4c77-0658-332d-fdb5f75df13a}">
      <Declaration><![CDATA[METHOD PRIVATE CalculateSetpointValue : INT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CalculateSetpointValue := REAL_TO_INT(fSetpoint * EXPT(10, _CoeList.DecimalDigits.Value));]]></ST>
      </Implementation>
    </Method>
    <Property Name="Capacity" Id="{151e0e68-21c0-0cd2-1fbe-f6ddb4155f36}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
// Gets capacity of the device
PROPERTY Capacity : REAL]]></Declaration>
      <Get Name="Get" Id="{e4917337-5c75-0576-1f6e-fc4f12ed5d88}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Capacity := _CoeList.Capacity.Value;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CapacityUnit" Id="{2b8d7175-dc8f-0228-2ee3-e0fa3fc3423f}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
// Gets the capacity unit of the device
PROPERTY CapacityUnit : STRING(30)]]></Declaration>
      <Get Name="Get" Id="{d53e5f36-16a4-0e81-13ff-1ee900c38d84}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CapacityUnit := _CoeList.CapacityUnit.Value;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{452560b1-3dd5-07ef-1f9c-d7749fdaa339}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	fPredictedFlowCapacity	: REAL;	// Predicted flow capacity. If bWriteLogs is set to TRUE and the read capacity differs, the error will be reported by the logger.
	sPredictedGasType		: STRING;// Predicted gas type. If bWriteLogs is set to TRUE and the read gas type differs, the error will be reported by the logger.
	sPredictedFlowUnit		: STRING; // Predicted flow unit. If bWriteLogs is set to TRUE and the read flow unit differs, the error will be reported by the logger.
	logger					: REFERENCE TO ZigaLibs_Logging.I_Logger;	// Logger implementation provided, set to 0 if not required.
	mode					: E_ControllerMode;	// Controller initial mode
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_predictedFlowCapacity := fPredictedFlowCapacity;
_predictedGasType := sPredictedGasType;
_predictedFlowUnit := sPredictedFlowUnit;
_logger REF= logger;
_mode := mode;
_writeLogs := __ISVALIDREF(logger);]]></ST>
      </Implementation>
    </Method>
    <Property Name="FluidName" Id="{72233265-6bff-0f7e-33e9-3452c3568c33}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
// Gets the fluid name of the device
PROPERTY FluidName : STRING(30)]]></Declaration>
      <Get Name="Get" Id="{392a6e59-09a9-0957-1857-02c2bbd67f77}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[FluidName := _CoeList.FluidName.Value;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Mode" Id="{4c7e1d0e-6e00-01e7-36c0-8b3b117df91e}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
// Gets or sets the controller mode
PROPERTY PUBLIC Mode : E_ControllerMode]]></Declaration>
      <Get Name="Get" Id="{e4eff9a5-548f-0608-1fca-54fd16a4d25f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Mode := _mode;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{0d462039-cf9e-0ae0-2cbb-56e6bc7375e2}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_mode := Mode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ReadCoE" Id="{1c46f6b9-c8bc-064d-0797-2b06657f41c3}">
      <Declaration><![CDATA[(* Reads CoE items and updates them. Returns TRUE when done, even if an error occurs. Error is reported to log.*)
METHOD PUBLIC ReadCoE : BOOL
VAR_INST
	eReadCoeStep	: E_ParameterReadingStep;
	bCoeReadError	: BOOL;
	bError			: BOOL;
	fbCoeReadWrite	: ZigaLibs_Core.FB_CoeReadWrite;
END_VAR

VAR CONSTANT
	MAX_REAL_VALUE_DEVIATION : REAL := 0.1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eReadCoeStep OF
	E_ParameterReadingStep.IDLE:
		IF _ethercatBoxName = '' THEN
			_ethercatBoxName := ZigaLibs_Core.EthercatHelper.GetBoxNameByAddress(
				outError := bError,
				PlcRuntimeNetId := '',
				AmsNetId := Inputs.AmsAddr);
		ELSIF _ethercatBoxName <> '' OR bError THEN
			eReadCoeStep := E_ParameterReadingStep.GAS_TYPE;
			IF _writeLogs THEN
				IF NOT bError THEN
					_logger.LogInfo(message := _stringBuilder.Reset()	
						.AddString(str := _logPrefix)
						.AddString(str := 'Reading CoE parameters for Bronkhorst device ')
						.AddWithDblQuotationMarks(str := _ethercatBoxName)
						.AddString(str := '...')
						.Create());
				ELSE
					_logger.LogInfo(message := _stringBuilder.Reset()	
						.AddString(str := _logPrefix)
						.AddString(str := 'Reading CoE parameters for Bronkhorst device ')
						.AddWithDblQuotationMarks(str := '<Error reading EC box name>')
						.AddString(str := '...')
						.Create());
				END_IF

			END_IF
		END_IF
		
	E_ParameterReadingStep.GAS_TYPE:
		IF fbCoeReadWrite.ReadAny(
			CoeEntry := ADR(_CoeList.FluidName),
			Value := _CoeList.FluidName.Value,
			SlaveAddr := Inputs.AmsAddr)
		THEN
			IF _writeLogs THEN
				IF ZigaLibs_Core.StringHelper.TrimRightSide(_CoeList.FluidName.Value) <> _predictedGasType THEN
					_logger.LogWarning(message := _stringBuilder.Reset()
						.AddString(_logPrefix)
						.AddString('Invalid gas type found! Predicted gas type is ')
						.AddString(_predictedGasType)
						.AddString(' and actual gas type found is ')
						.AddString(_coeList.FluidName.Value)
						.Create());
				END_IF
			END_IF
			eReadCoeStep := E_ParameterReadingStep.FLOW_UNIT;
		END_IF
		
	E_ParameterReadingStep.FLOW_UNIT:
		IF fbCoeReadWrite.ReadAny(
			CoeEntry := ADR(_CoeList.CapacityUnit),
			Value := _CoeList.CapacityUnit.Value,
			SlaveAddr := Inputs.AmsAddr)
		THEN
			IF _writeLogs THEN
				IF ZigaLibs_Core.StringHelper.TrimRightSide(_CoeList.CapacityUnit.Value) <> _predictedFlowUnit THEN
					_logger.LogWarning(message := _stringBuilder.Reset()
						.AddString(_logPrefix)
						.AddString('Invalid flow unit found! Predicted unit is ')
						.AddWithDblQuotationMarks(_predictedFlowUnit)
						.AddString(' and actual flow unit found is ')
						.AddWithDblQuotationMarks(_coeList.CapacityUnit.Value)
						.Create());
				END_IF
			END_IF
			eReadCoeStep := E_ParameterReadingStep.DECIMAL_DIGITS;
		END_IF
		
	E_ParameterReadingStep.DECIMAL_DIGITS:
		IF fbCoeReadWrite.ReadAny(
			CoeEntry := ADR(_CoeList.DecimalDigits),
			Value := _CoeList.DecimalDigits.Value,
			SlaveAddr := Inputs.AmsAddr)
		THEN
			eReadCoeStep := E_ParameterReadingStep.FLOW_CAPACITY;
		END_IF
		
	E_ParameterReadingStep.FLOW_CAPACITY:
		IF fbCoeReadWrite.ReadAny(
			CoeEntry := ADR(_CoeList.Capacity),
			Value := _CoeList.Capacity.Value,
			SlaveAddr := Inputs.AmsAddr)
		THEN
			IF _writeLogs THEN
				IF ABS(_CoeList.Capacity.Value - _predictedFlowCapacity) >= MAX_REAL_VALUE_DEVIATION THEN
					_logger.LogWarning(message := _stringBuilder.Reset()
						.AddString(_logPrefix)
						.AddString('Invalid flow capacity found! Predicted capacity is ')
						.AddWithDblQuotationMarks('')
						.AddAnyReal(_predictedFlowCapacity, 3, TRUE).AddString(' ').AddString(_coeList.CapacityUnit.Value)
						.AddWithDblQuotationMarks('')
						.AddString(' and actual flow capacity found is ')
						.AddWithDblQuotationMarks('')
						.AddAnyReal(_CoeList.Capacity.Value, 3, TRUE).AddString(' ').AddString(_coeList.CapacityUnit.Value)
						.AddWithDblQuotationMarks('')
						.Create());
					END_IF
				END_IF
			eReadCoeStep := E_ParameterReadingStep.IDLE;
			ReadCoE := TRUE;
		END_IF	
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Property Name="Status" Id="{0f8f3843-acd8-0cc9-1c5c-b80666ff4a26}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
// Gets the controller status
PROPERTY Status : REFERENCE TO ST_ControllerStatus]]></Declaration>
      <Get Name="Get" Id="{c61a1ec7-9865-0810-09cb-8b3d8a9a65a7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= _status;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>